{"version":3,"sources":["HomePage.tsx","UserPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["HomePage","useState","searchValue","setSearchValue","results","setResults","type","name","onChange","event","query","target","value","length","axios","get","then","data","slice","map","x","id","names","international","console","log","catch","thrown","to","UserPage","useParams","App","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRAoDiBA,EAzCA,WAAO,IAAD,EACiBC,mBAAiB,IADlC,mBACdC,EADc,KACDC,EADC,OAESF,mBAAiB,IAF1B,mBAEdG,EAFc,KAELC,EAFK,KAwBnB,OACE,mCACE,iCACE,wDAGA,uBAAOC,KAAK,OAAOC,KAAK,WAAWC,SAff,SAACC,GAVX,IAACC,EAWbP,EAAeM,EAAME,OAAOC,OACzBH,EAAME,OAAOC,MAAMC,QAAU,GAZnBH,EAaDD,EAAME,OAAOC,MAZ3BE,IAAMC,IAAN,gDAAmDL,IAChDM,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACPZ,EAAWY,EAAKA,KAAKC,MAAM,EAAE,GAAGC,KAAI,SAACC,GAAY,MAAO,CAACC,GAAID,EAAEC,GAAId,KAAMa,EAAEE,MAAMC,mBACjFC,QAAQC,IAAIR,MACXS,OAAM,SAACC,GAAYH,QAAQC,IAAIE,OAW9BtB,EAAW,KASmDO,MAAOV,IACvE,6BACGE,EAAQe,KAAI,gBAAEE,EAAF,EAAEA,GAAId,EAAN,EAAMA,KAAN,OACX,6BAAI,eAAC,IAAD,CAAMqB,GAAE,gBAAWP,GAAnB,UAA0Bd,EAA1B,oBCjCHsB,EARE,WAAO,IACfR,EAAMS,cAANT,GAEL,OACE,4BAAIA,KCyBKU,EArBH,WACV,OACE,eAAC,IAAD,WACE,6BACE,cAAC,IAAD,CAAMH,GAAG,IAAT,mCAEF,sEAEA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOI,KAAK,YAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAIC,OAAK,EAArB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,yBCZOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ae8e7466.chunk.js","sourcesContent":["import axios from \"axios\";\nimport React, { ChangeEvent, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n\n\ninterface User {\n    name: string,\n    id: string\n}\n\nconst HomePage = () => {\n    let [searchValue, setSearchValue] = useState<string>('');\n    let [results, setResults] = useState<User[]>([]);\n  \n  \n    const getInfo = (query: string) => {\n      axios.get(`http://speedrun.com/api/v1/users?name=${query}`)\n        .then(({ data }) => {\n          setResults(data.data.slice(0,5).map((x: any) => {return {id: x.id, name: x.names.international}}))\n          console.log(data)\n        }).catch((thrown) => {console.log(thrown)});\n  \n  \n    }\n  \n    const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n        setSearchValue(event.target.value);\n        if(event.target.value.length >= 1) {\n            getInfo(event.target.value);\n        }\n        else {\n            setResults([])\n        }\n    }\n    return (\n      <>\n        <form>\n          <label>\n            Enter your username\n          </label>\n          <input type=\"text\" name=\"username\" onChange={handleInputChange} value={searchValue}/>\n          <ul>\n            {results.map(({id, name}) => (\n              <li><Link to={`/user/${id}`}>{name} </Link></li>\n            ))}\n          </ul>\n        </form>\n      </>\n    )\n  }\n\n  export default HomePage;","import React from \"react\";\nimport {useParams} from 'react-router-dom';\n\nconst UserPage = () => {\n    let {id} = useParams<{id?: string}>();\n    \n    return (\n      <p>{id}</p>\n    )\n  }\n\nexport default UserPage;","import React from 'react';\n\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\n\nimport './App.css';\nimport HomePage from './HomePage';\nimport UserPage from './UserPage'\n\n\n\n\nconst App = () => {\n  return (\n    <Router>\n      <h1>\n        <Link to=\"/\">Speedrun PB Grapher</Link>\n      </h1>\n      <b>This site is still under construction</b>\n\n      <Switch>\n        <Route path=\"/user/:id\">\n          <UserPage />\n        </Route>\n        <Route path=\"/\" exact>\n          <HomePage/>\n        </Route>\n        <Route>404</Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}