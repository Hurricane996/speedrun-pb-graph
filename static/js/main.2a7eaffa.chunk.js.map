{"version":3,"sources":["components/Alerts.tsx","utils/makeTimeHumanReadable.ts","utils/useFetcher.ts","utils/insertIfExists.ts","pages/GraphPage.tsx","components/SearchComponent.tsx","pages/HomePage.tsx","pages/UserPage.tsx","pages/SearchPage.tsx","App.tsx","index.tsx"],"names":["ErrorAlert","error","Alert","variant","LoadingAlert","makeTimeHumanReadable","input","ms","s","Math","floor","m","h","msString","toFixed","slice","sString","mString","hString","useFetcher","fetcher","forceReload","useState","data","setData","loading","setLoading","setError","useEffect","a","newData","console","log","message","insertIfExists","text","delim","putDelimiterBefore","userId","categoryId","levelId","searchParams","Error","Promise","all","fetchp","SPEEDRUN_COM_URL","timeout","categoryDataRaw","userDataRaw","runsDataRaw","json","categoryData","userData","runsData","entries","map","key","value","dataRaw","values","label","subcategoryString","join","levelName","levelDataRaw","levelData","name","runs","filter","run","status","Object","every","runKey","get","date","DateTime","fromFormat","zone","time","times","primary_t","id","sort","first","second","gameName","game","names","international","categoryName","username","GraphPage","useParams","theChart","useRef","URLSearchParams","useLocation","search","chartData","labels","datasets","borderColor","chartOptions","onClick","current","activeElements","getActiveElements","length","index","window","location","href","responsive","scales","x","type","tooltipFormat","y","ticks","callback","plugins","tooltip","callbacks","tooltipItem","parsed","to","Jumbotron","ref","options","SearchComponent","setSearch","history","useHistory","Form","inline","onSubmit","e","preventDefault","push","InputGroup","Control","placeholder","onChange","target","Button","HomePage","loadVariables","variables","variableDataRaw","variableData","subcategoryKeyId","subcategoryValueId","subcategoryValueName","userApiDataRaw","pbDataRaw","userApiData","pbData","pbDataGrouped","groupBy","pb","category","pbDataFullGame","pbDataIL","gameId","subcategories","categoryDataFullGame","b","level","categoryDataILs","gameIds","Set","games","fullGameCategories","levelCategories","subcategoryLinkString","subcategory","subcategoryTextString","UserPage","Fragment","JSON","stringify","query","offset","rawLookupData","rawSearchData","lookupData","searchData","exactMatch","results","user","hasNext","undefined","pagination","links","find","link","rel","SearchPage","strOffset","parseInt","max","App","Navbar","bg","expand","className","style","justifyContent","Nav","Brand","color","Link","Container","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAMaA,EAA8B,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAF,OACvC,eAACC,EAAA,EAAD,CAAOC,QAAQ,SAAf,+BAA2CF,MAGlCG,EAAmB,kBAC5B,cAACF,EAAA,EAAD,CAAOC,QAAQ,OAAf,yBCIWE,EAfe,SAACC,GAC3B,IAAMC,EAAKD,EAAQ,EACbE,EAAIC,KAAKC,MAAMJ,GAAS,GACxBK,EAAIF,KAAKC,MAAMJ,EAAQ,IAAM,GAC7BM,EAAIH,KAAKC,MAAMJ,EAAQ,MAEvBO,EAAkB,IAAPN,EAAW,GAAKA,EAAGO,QAAQ,GAAGC,MAAM,GAE/CC,EAAUR,EAAI,GAAJ,WAAaA,GAAb,UAAsBA,GAEhCS,EAAUN,EAAI,GAAJ,WAAaA,GAAb,UAAsBA,GAChCO,EAAgB,IAANN,EAAU,GAAV,UAAkBA,EAAlB,KAEhB,MAAM,GAAN,OAAUM,GAAV,OAAoBD,EAApB,YAA+BD,GAA/B,OAAyCH,ICc9BM,EAvBI,SAAiBC,EAAmCd,EAAee,GAAoE,IAAD,EAC7HC,mBAAuB,MADsG,mBAC9IC,EAD8I,KACxIC,EADwI,OAEvHF,oBAAkB,GAFqG,mBAE9IG,EAF8I,KAErIC,EAFqI,OAG3HJ,mBAAsB,MAHqG,mBAG9IrB,EAH8I,KAGvI0B,EAHuI,KAmBrJ,OAdAC,qBAAU,WAAO,sBAAC,4BAAAC,EAAA,6DACdH,GAAW,GADG,kBAIYN,EAAQd,GAJpB,OAIJwB,EAJI,OAKVN,EAAQM,GACRC,QAAQC,IAAI,qBACZN,GAAW,GAPD,kDASVK,QAAQ9B,MAAR,MACA0B,EAAS,KAAEM,SAVD,yDAAD,KAAR,OAYFZ,QAZE,IAYFA,IAAe,IAEf,CAACE,EAAME,EAASxB,ICnBZiC,EAJQ,SAACC,EAAwBC,EAAeC,GAAxC,OAAiFA,EACjGF,EAAOC,EAAQD,EAAO,GACtBA,EAAOA,EAAOC,EAAQ,IC2BvBhB,EAAgJ,uCAAG,iEAAAS,EAAA,yDAAQS,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,WAAYC,EAA5B,EAA4BA,QAASC,EAArC,EAAqCA,aACtLH,EADiJ,sBACnI,IAAII,MAAM,wBADyH,UAEjJH,EAFiJ,sBAE/H,IAAIG,MAAM,wBAFqH,uBAI3FC,QAAQC,IAAI,CAClEC,IAAO,GAAD,OAAIC,EAAJ,uBAAmCP,EAAnC,eAA2D,CAACQ,QAAS,MAC3EF,IAAO,GAAD,OAAIC,EAAJ,kBAA8BR,GAAS,CAACS,QAAS,MACvDF,IAAO,GAAD,OAAIC,EAAJ,sBAAkCR,GAAlC,OAA2CJ,EAAeM,EAAS,WAAW,GAA9E,qBAAgGD,EAAhG,YAAqH,CAACQ,QAAS,QAPY,0CAI9IC,EAJ8I,KAI7HC,EAJ6H,KAIhHC,EAJgH,eAWpGP,QAAQC,IAAI,CACzDI,EAAgBG,OAChBF,EAAYE,OACZD,EAAYC,SAdqI,2CAW9IC,EAX8I,KAWhIC,EAXgI,KAWtHC,EAXsH,eAiBpHX,QAAQC,IAAI,YAAIH,EAAac,WAAWC,IAA5B,uCAAgC,qCAAA3B,EAAA,gFAAQ4B,EAAR,KAAYC,EAAZ,cACnDb,IAAO,GAAD,OAAIC,EAAJ,sBAAkCW,IADW,cACnEE,EADmE,gBAEtDA,EAAQR,OAF8C,cAEnE5B,EAFmE,yBAIlEA,EAAKA,KAAKqC,OAAOA,OAAOF,GAAiBG,OAJyB,2CAAhC,wDAjBwG,WAiB/IC,EAjB+I,OAsBhJC,KAAK,MAENC,EAAY,IAEbxB,EA1BkJ,kCA2BtHK,IAAO,GAAD,OAAIC,EAAJ,mBAA+BN,IA3BiF,eA2B3IyB,EA3B2I,iBA4BzHA,EAAad,OA5B4G,QA4B3Ie,EA5B2I,OA8BjJF,EAAYE,EAAU3C,KAAK4C,KA9BsH,eAiC/IC,EAAOd,EAAS/B,KACjB8C,QAAO,SAAAC,GAAG,MAAyB,aAAtBA,EAAIC,OAAOA,UAExBF,QAAO,SAAAC,GAAG,OAAGE,OAAOjB,QAAQe,EAAIV,QAAQa,OAAM,mCAAEC,EAAF,mBAAiEjC,EAAakC,IAAID,SAChIlB,KAAI,SAAAc,GAAG,MAAK,CACTM,KAAMC,WAASC,WAAWR,EAAIM,KAAM,aAAc,CAACG,KAAM,QACzDC,KAAMV,EAAIW,MAAMC,UAChBC,GAAIb,EAAIa,OAGXC,MAAK,SAACC,EAAOC,GAAR,OACFD,EAAMT,OAASU,EAAOV,KACfS,EAAML,KAAOM,EAAON,MAAQ,EAAI,EAChCK,EAAMT,KAAOU,EAAOV,MAAQ,EAAI,KA9CsG,kBAiD9I,CACHW,SAAUnC,EAAa7B,KAAKiE,KAAKjE,KAAKkE,MAAMC,cAC5CC,aAAcvC,EAAa7B,KAAK4C,KAChCL,oBACA8B,SAAUvC,EAAS9B,KAAKkE,MAAMC,cAC9B1B,YACAI,SAvDiJ,4CAAH,sDAqIvIyB,EA1EO,WACtB,MAE0CC,cAA/BxD,EAFX,EAEWA,OAAQC,EAFnB,EAEmBA,WAAYC,EAF/B,EAE+BA,QAErBuD,EAAWC,iBAA0B,MAErCvD,EAAe,IAAIwD,gBAAgBC,cAAcC,QAN3D,EAQmChF,EAAWC,EAAS,CAACkB,SAAQC,aAAYC,UAASC,iBARrF,mBAQWlB,EARX,KAQiBE,EARjB,KAQ0BxB,EAR1B,KASI,GAAGA,EAAO,OAAO,cAAC,EAAD,CAAYA,MAAOA,IACpC,GAAGwB,EAAS,OAAO,cAAC,EAAD,IAEnB,IAAM2E,EAAY,CACdC,OAAM,OAAE9E,QAAF,IAAEA,OAAF,EAAEA,EAAM6C,KAAKZ,KAAI,SAAAc,GAAG,OAAEA,EAAIM,QAChC0B,SAAU,CAAC,CACPzC,MAAO,OACPtC,KAAI,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAM6C,KAAKZ,KAAI,SAAAc,GAAG,OAAEA,EAAIU,QAC9BuB,YAAa,kBAcfC,EAAmC,CACrCC,QAXiB,WAEjB,GAAIV,EAASW,QAAb,CACA,IAAMC,EAAiBZ,EAASW,QAAQE,oBACxC,GAAGD,EAAeE,OAAS,EAAG,CAC1B,IAAMvC,EAAG,OAAG/C,QAAH,IAAGA,OAAH,EAAGA,EAAM6C,KAAKuC,EAAe,GAAGG,OACzCC,OAAOC,SAASC,KAAhB,0CAAmD3C,QAAnD,IAAmDA,OAAnD,EAAmDA,EAAKa,OAM5D+B,YAAY,EACZC,OAAQ,CACJC,EAAG,CACCC,KAAM,OACNrC,KAAM,CACFsC,cAAe,gBAGvBC,EAAG,CACCC,MAAO,CAEHC,SAAU,SAAC/D,GAAD,OAA2BrD,EAAsBqD,OAIvEgE,QAAS,CACLC,QAAS,CACLC,UAAW,CACP/D,MAAO,SAACgE,GAAD,OAA4CxH,EAAsBwH,EAAYC,OAAOP,QAM5G,OAAIhG,EAMA,qCACI,+BAAKA,EAAKgE,SAAV,KAAsBrD,EAAeX,EAAKyC,UAAU,KAAMzC,EAAKoE,aAA/D,MAAgFzD,EAAeX,EAAKuC,kBAAmB,OAAQvC,EAAKqE,YACpI,cAAC,IAAD,CAAMmC,GAAE,gBAAWzF,GAAnB,0BACA,4BAAG,qGACH,cAAC0F,EAAA,EAAD,UACI,cAAC,IAAD,CAAMC,IAAKlC,EAAUsB,KAAK,OAAO9F,KAAM6E,EAAW8B,QAAS1B,SAXrD,cAAC,EAAD,CAAYvG,MAAM,2E,mCCpHzBkI,EAvBa,WAAO,IAAD,EACF7G,mBAAiB,IADf,mBACvB6E,EADuB,KACfiC,EADe,KAExBC,EAAUC,cAWhB,OACI,cAACC,EAAA,EAAD,CAAMC,QAAM,EAACC,SALF,SAACC,GACZA,EAAEC,iBACFN,EAAQO,KAAR,kBAAwBzC,KAGxB,SACI,eAAC0C,EAAA,EAAD,WACI,cAACN,EAAA,EAAKO,QAAN,CAAczB,KAAK,SAAUlD,KAAK,WAAWgB,GAAG,cAAc4D,YAAY,wBAAwBrF,MAAOyC,EAAQ6C,SAZxG,SAACN,GAClBA,EAAEC,iBACFP,EAAUM,EAAEO,OAAOvF,UAWX,cAACwF,EAAA,EAAD,CAAQ7B,KAAK,SAAb,SAAsB,cAAC,IAAD,YCRvB8B,EAZM,WAGjB,OACI,qCACI,qEACA,sEACA,cAAC,EAAD,Q,SC+BN/H,EAAuC,uCAAG,iEAAAS,EAAA,6DAAQsD,EAAR,EAAQA,GAC9CiE,EADsC,+BAAAvH,EAAA,MACtB,WAAOwH,GAAP,SAAAxH,EAAA,sEACLc,QAAQC,IAAI4B,OAAOjB,QAAQ8F,GAAW7F,IAA1B,iBAAAgB,OAAA,IAAAA,CAAA,UAA8B,qCAAA3C,EAAA,gFAAQ4B,EAAR,KAAaC,EAAb,cACrBb,IAAO,GAAD,OAAIC,EAAJ,sBAAkCW,IADnB,cAC7C6F,EAD6C,gBAExBA,EAAgBnG,OAFQ,cAE7CoG,EAF6C,yBAI5C,CACHC,iBAAkB/F,EAClBgG,mBAAoB/F,EACpBgG,qBAAsBH,EAAahI,KAAKqC,OAAOA,OAAOF,GAAiBG,QAPxB,2CAA9B,wDADP,mFADsB,+DAcFlB,QAAQC,IAAI,CAClDC,IAAO,GAAD,OAAIC,EAAJ,kBAA8BqC,GAAK,CAACpC,QAAS,MACnDF,IAAO,GAAD,OAAIC,EAAJ,kBAA8BqC,EAA9B,6CAA4E,CAACpC,QAAS,QAhBpD,0CAcrC4G,EAdqC,KAcrBC,EAdqB,eAmBRjH,QAAQC,IAAI,CAC5C+G,EAAexG,OACfyG,EAAUzG,SArB8B,2CAmBrC0G,EAnBqC,KAmBxBC,EAnBwB,KAwBtCC,EAAiBC,kBAAQF,EAAOvI,MAAM,SAAA0I,GAAE,OAAIA,EAAGC,SAAS3I,KAAK8F,QAE7D8C,EA1BsC,UA0BrBJ,EAAc,mBA1BO,QA0BQ,GAC9CK,EA3BsC,UA2B3BL,EAAc,oBA3Ba,QA2BG,GA3BH,UA6BIpH,QAAQC,IAAIuH,EAAe3G,IAAf,uCAAmB,WAAMyG,GAAN,SAAApI,EAAA,kEACjEoI,EAAGzE,KAAKjE,KAAKkE,MAAMC,cAD8C,KAElEuE,EAAGzE,KAAKjE,KAAK4D,GAFqD,KAG7D8E,EAAGC,SAAS3I,KAAK4C,KAH4C,KAI/D8F,EAAGC,SAAS3I,KAAK4D,GAJ8C,SAMtDiE,EAAca,EAAG3F,IAAIV,QANiC,6CAC3E2B,SAD2E,KAE3E8E,OAF2E,KAG3E1E,aAH2E,KAI3EpD,WAJ2E,KAM3E+H,cAN2E,kDAAnB,wDA7BhB,eA6BtCC,EA7BsC,OAoCtCnF,MAAK,SAACvD,EAAa2I,GACrB,OAAG3I,EAAE8D,aAAe6E,EAAE7E,cAAsB,EACzC9D,EAAE8D,aAAe6E,EAAE7E,aAAqB,EACd,GAA1B9D,EAAEyI,cAAczD,OAAoB,EACpChF,EAAEyI,cAAc,GAAGZ,qBAAuBc,EAAEF,cAAc,GAAGZ,sBAA8B,EAC3F7H,EAAEyI,cAAc,GAAGZ,qBAAuBc,EAAEF,cAAc,GAAGZ,qBAA6B,EACtF,KA1CiC,UA6CI/G,QAAQC,IAAKwH,EAAS5G,IAAT,uCAAa,WAAMyG,GAAN,SAAApI,EAAA,kEAC5DoI,EAAGzE,KAAKjE,KAAKkE,MAAMC,cADyC,KAE7DuE,EAAGzE,KAAKjE,KAAK4D,GAFgD,KAGxD8E,EAAGC,SAAS3I,KAAK4C,KAHuC,KAI1D8F,EAAGC,SAAS3I,KAAK4D,GAJyC,KAK7D8E,EAAGQ,MAAMlJ,KAAK4D,GAL+C,KAM3D8E,EAAGQ,MAAMlJ,KAAK4C,KAN6C,SAQjDiF,EAAca,EAAG3F,IAAIV,QAR4B,6CACtE2B,SADsE,KAEtE8E,OAFsE,KAGtE1E,aAHsE,KAItEpD,WAJsE,KAKtEC,QALsE,KAMtEwB,UANsE,KAQtEsG,cARsE,mDAAb,wDA7CjB,eA6CtCI,EA7CsC,OAsDrCtF,MAAK,SAACvD,EAAkB2I,GAC3B,OAAG3I,EAAEmC,UAAYwG,EAAExG,WAAmB,EACnCnC,EAAEmC,UAAYwG,EAAExG,UAAkB,EAClCnC,EAAE8D,aAAe6E,EAAE7E,cAAsB,EACzC9D,EAAE8D,aAAe6E,EAAE7E,aAAqB,EACd,GAA1B9D,EAAEyI,cAAczD,OAAoB,EACpChF,EAAEyI,cAAc,GAAGZ,qBAAuBc,EAAEF,cAAc,GAAGZ,sBAA8B,EAC3F7H,EAAEyI,cAAc,GAAGZ,qBAAuBc,EAAEF,cAAc,GAAGZ,qBAA6B,EAEtF,KAGLiB,EAlEsC,YAkEd,IAAIC,IAAYd,EAAOvI,KAAKiC,KAAI,SAAAyG,GAAE,OAAIA,EAAGzE,KAAKjE,KAAK4D,QAE3E0F,EAAgBF,EAAQnH,KAAI,SAAA2B,GAC9B,IAAM2F,EAAqBP,EAAqBlG,QAAO,SAAA6F,GAAQ,OAAIA,EAASG,SAAWlF,KACjF4F,EAAkBL,EAAgBrG,QAAO,SAAA6F,GAAQ,OAAIA,EAASG,SAAWlF,KAE/E,MAAO,CACHA,KACAhB,KAAM2G,EAAmBjE,OAAS,EAAIiE,EAAmB,GAAGvF,SAAWwF,EAAgB,GAAGxF,SAC1FuF,qBACAC,sBA5EoC,kBAgFrC,CACH5F,GAAI0E,EAAYtI,KAAK4D,GACrBhB,KAAM0F,EAAYtI,KAAKkE,MAAMC,cAC7BmF,MAAOA,IAnFiC,4CAAH,sDAuFvCG,EAAwB,SAACV,GAAD,OAA0CA,EAAczD,OAChF,IAAMyD,EAAc9G,KAAI,SAACyH,GAAD,gBAAoBA,EAAYzB,iBAAhC,YAAoDyB,EAAYxB,uBAAsB1F,KAAK,KACnH,IAEAmH,EAAwB,SAACZ,GAAD,OAA0CA,EAAczD,OAChF,MAAMyD,EAAc9G,KAAI,SAACyH,GAAD,OAAiBA,EAAYvB,wBAAsB3F,KAAK,MAChF,IAwCSoH,EAtCO,WAAO,IAAD,EACjBhG,EAAMW,cAANX,GADiB,EAGOhE,EAAWC,EAAQ,CAAC+D,OAH3B,mBAGjB5D,EAHiB,KAGXE,EAHW,KAGFxB,EAHE,KAKxB,OAAGA,EAAc,cAAC,EAAD,CAAYA,MAAOA,IACjCwB,EAAgB,cAAC,EAAD,IAEX,qCACJ,wDAAoBF,QAApB,IAAoBA,OAApB,EAAoBA,EAAM4C,QACzB5C,IAAY,OAAJA,QAAI,IAAJA,GAAA,UAAAA,EAAMsJ,aAAN,eAAahE,QAAS,EAA9B,OAAkCtF,QAAlC,IAAkCA,OAAlC,EAAkCA,EAAMsJ,MAAMrH,KAAI,SAACgC,GAAD,OAC/C,eAAC,IAAM4F,SAAP,WACI,mCAAM5F,EAAKrB,KAAX,OACCqB,EAAKsF,mBAAmBjE,OAAS,EAAI,iDAA2B,6BACjE,6BACKrB,EAAKsF,mBAAmBtH,KAAI,SAAC0G,GAAD,OACzB,6BACI,eAAC,IAAD,CAAMnC,GAAE,iBAAYxG,EAAK4D,GAAjB,YAAuB+E,EAAS3H,YAAhC,OAA6CyI,EAAsBd,EAASI,gBAApF,UACKJ,EAASvE,aAAcuF,EAAsBhB,EAASI,mBAFtDe,KAAKC,UAAUpB,SAO/B1E,EAAKuF,gBAAgBlE,OAAS,EAAI,0CAAoB,6BACvD,6BACKrB,EAAKuF,gBAAgBvH,KAAI,SAAC0G,GAAD,OACtB,6BACI,eAAC,IAAD,CAAMnC,GAAE,oBAAexG,EAAK4D,GAApB,YAA0B+E,EAAS1H,QAAnC,YAA8C0H,EAAS3H,WAAvD,YAAqEyI,EAAsBd,EAASI,gBAA5G,UACKJ,EAASlG,UADd,IAC0BkG,EAASvE,aAAcuF,EAAsBhB,EAASI,mBAF3Ee,KAAKC,UAAUpB,WAff1E,EAAKL,OAuBxB,wE,2BCtJR/D,G,OAA2D,uCAAG,+CAAAS,EAAA,6DAAQ0J,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OAAf,SACnB7I,QAAQC,IAAI,CACrDC,IAAO,GAAD,OAAIC,EAAJ,yBAAqCyI,GAAS,CAACxI,QAAS,MAC9DF,IAAO,GAAD,OAAIC,EAAJ,uBAAmCyI,EAAnC,mBAAmDC,GAAU,CAACzI,QAAS,QAHjB,0CACzD0I,EADyD,KAC1CC,EAD0C,cAKzB/I,QAAQC,IAAI,CAC/C6I,EAActI,OACduI,EAAcvI,SAP8C,0CAKzDwI,EALyD,KAK7CC,EAL6C,uBAUzD,CACHC,WAAYF,EAAWpK,KAAKsF,OAAS,EAAI,CACrC1B,GAAIwG,EAAWpK,KAAK,GAAG4D,GACvBhB,KAAMwH,EAAWpK,KAAK,GAAGkE,MAAMC,eAC/B,KACJoG,QAASF,EAAWrK,KAAKiC,KAAI,SAAAuI,GAAI,MAAK,CAAC5G,GAAI4G,EAAK5G,GAAIhB,KAAM4H,EAAKtG,MAAMC,kBACrEsG,aAA0EC,IAAjEL,EAAWM,WAAWC,MAAMC,MAAK,SAAAC,GAAI,MAAgB,QAAZA,EAAKC,SAhBK,4CAAH,uDAoDlDC,EA/BQ,WAAO,IACnBhB,EAAUzF,cAAVyF,MAIDiB,EAHe,IAAIvG,gBAAgBC,cAAcC,QAGxBxB,IAAI,UAC7B6G,EAASgB,EAAYC,SAASD,GAAa,EANxB,EAQMrL,EAAWC,EAAS,CAACmK,QAAOC,UAAQ,CAACD,EAAMC,IARjD,mBAQlBjK,EARkB,KAQZE,EARY,KAQHxB,EARG,KAUzB,OAAGA,EAAc,cAAC,EAAD,CAAYA,MAAOA,IACjCwB,EAAgB,cAAC,EAAD,IAGf,qCACI,8CAAiB8J,EAAjB,OACA,gCACS,OAAJhK,QAAI,IAAJA,OAAA,EAAAA,EAAMsK,aAAc,4BAAG,2DAA6B,eAAC,IAAD,CAAM9D,GAAE,gBAAWxG,EAAKsK,WAAW1G,IAAnC,UAA0C5D,EAAKsK,WAAW1H,KAA1D,aAChD,OAAJ5C,QAAI,IAAJA,OAAA,EAAAA,EAAMuK,UAAWvK,EAAKuK,QAAQjF,OAAS,EAAItF,EAAKuK,QAAQtI,KAAI,gBAAE2B,EAAF,EAAEA,GAAIhB,EAAN,EAAMA,KAAN,OACzD,6BAAa,eAAC,IAAD,CAAM4D,GAAE,gBAAW5C,GAAnB,UAA0BhB,EAA1B,QAAJgB,MACP,iDAAmB,cAAC,IAAD,CAAM4C,GAAG,IAAT,iCAG5ByD,EAAS,GAAM,cAAC,IAAD,CAAMzD,GAAE,kBAAawD,EAAb,mBAA6B9K,KAAKiM,IAAI,EAAGlB,EAAS,KAA1D,mBACfA,EAAS,IAAT,OAAcjK,QAAd,IAAcA,OAAd,EAAcA,EAAMyK,UAAW,OAC3B,OAAJzK,QAAI,IAAJA,OAAA,EAAAA,EAAMyK,UAAY,cAAC,IAAD,CAAMjE,GAAE,kBAAawD,EAAb,mBAA6BC,EAAS,IAA9C,wB,SClDlB1I,EAAmB,8BAyCjB6J,EAtCE,WACb,OACI,eAAC,IAAD,WACI,eAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,OAAO,KAAKC,UAAU,OAAOC,MAAO,CAACC,eAAe,iBAAtE,UACI,eAACC,EAAA,EAAD,WACI,cAACN,EAAA,EAAOO,MAAR,CAAclG,KAAK,KAAK+F,MAAO,CAACI,MAAO,SAAvC,iCACA,cAACF,EAAA,EAAIG,KAAL,CAAUpG,KAAK,KAAK+F,MAAO,CAACI,MAAO,SAAnC,qBAEJ,eAACF,EAAA,EAAD,CAAKH,UAAU,cAAf,UACI,cAAC,EAAD,IACA,cAACG,EAAA,EAAIG,KAAL,CAAUpG,KAAK,oDAAf,SAAmE,cAAC,IAAD,CAAQ+F,MAAO,CAACI,MAAO,SAAUL,UAAU,oBAGtH,cAACO,EAAA,EAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAK,YAAYC,OAAK,EAA7B,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOD,KAAK,yCAAyCC,OAAK,EAA1D,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOD,KAAK,6BAA6BC,OAAK,EAA9C,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOD,KAAK,iBAAiBC,OAAK,EAAlC,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOD,KAAK,IAAIC,OAAK,EAArB,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,2BC9CpBC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.2a7eaffa.chunk.js","sourcesContent":["import React, {FC} from \"react\";\nimport Alert from \"react-bootstrap/esm/Alert\";\n\ninterface ErrorProps {\n    error: string;\n}\nexport const ErrorAlert : FC<ErrorProps> = ({error} : ErrorProps) => (\n    <Alert variant=\"danger\">An error occured: {error}</Alert>\n);\n\nexport const LoadingAlert: FC = () => (\n    <Alert variant=\"info\">Loading...</Alert>\n);","const makeTimeHumanReadable = (input: number): string => {\n    const ms = input % 1;\n    const s = Math.floor(input) % 60;\n    const m = Math.floor(input / 60) % 60;\n    const h = Math.floor(input / 3600);\n\n    const msString = ms === 0 ? \"\" : ms.toFixed(3).slice(1);\n\n    const sString = s < 10 ? `0${s}` : `${s}`;\n\n    const mString = m < 10 ? `0${m}` : `${m}`;\n    const hString = h === 0 ? \"\" : `${h}:`;\n\n    return `${hString}${mString}:${sString}${msString}`;\n};\nexport default makeTimeHumanReadable;","import { useEffect, useState } from \"react\";\n\nexport type Fetcher<InType,OutType> = (input: InType) => Promise<OutType>;\n\nconst useFetcher = <InType,OutType>(fetcher: Fetcher<InType, OutType>, input: InType, forceReload?: unknown[]) : [OutType|null, boolean, string|null] => {\n    const [data, setData] = useState<OutType|null>(null);\n    const [loading, setLoading] = useState<boolean>(true);\n    const [error, setError] = useState<string|null>(null);\n\n    useEffect(() => {(async () => {\n        setLoading(true);\n\n        try {\n            const newData = await fetcher(input);\n            setData(newData);\n            console.log(\"Data has been set\");\n            setLoading(false);\n        } catch (e) {\n            console.error(e);\n            setError(e.message);\n        }\n    })();},forceReload ?? []);\n\n    return [data, loading, error];\n    \n};\n\nexport default useFetcher;\n","const insertIfExists = (text: string|undefined, delim: string, putDelimiterBefore?: boolean): string => putDelimiterBefore\n    ? (text ? delim + text : \"\") \n    : (text ? text + delim : \"\") \n;\nexport default insertIfExists;","import fetchp from \"fetch-jsonp\";\nimport React, { FC, useRef } from \"react\";\nimport { useLocation, useParams } from \"react-router\";\nimport { SPEEDRUN_COM_URL } from \"../App\";\nimport { Line} from \"react-chartjs-2\";\nimport \"chartjs-adapter-luxon\";\nimport { DateTime } from \"luxon\";\nimport { Link } from \"react-router-dom\";\nimport { Jumbotron } from \"react-bootstrap\";\nimport { ErrorAlert, LoadingAlert } from \"../components/Alerts\";\nimport { SRCCategory_g, SRCLevel, SRCResult, SRCRun, SRCUser, SRCVariable } from \"../types/SRCQueryResults\";\nimport Chart from \"chart.js\";\nimport makeTimeHumanReadable from \"../utils/makeTimeHumanReadable\";\nimport useFetcher, { Fetcher } from \"../utils/useFetcher\";\nimport insertIfExists from \"../utils/insertIfExists\";\n\ninterface FetchedData {\n    gameName: string,\n    categoryName: string,\n    levelName: string,\n    subcategoryString: string,\n    username: string,\n    runs: {\n        date: DateTime;\n        time: number;\n        id: string;\n    }[]\n}\n\nconst fetcher: Fetcher<{userId: string|undefined, categoryId: string|undefined, levelId: string|undefined, searchParams: URLSearchParams},FetchedData> = async ({userId, categoryId, levelId, searchParams}) => {\n    if(!userId) throw new Error(\"No user id provided!\");\n    if(!categoryId) throw new Error(\"No user id provided!\");\n    \n    const [categoryDataRaw, userDataRaw, runsDataRaw] = await Promise.all([\n        fetchp(`${SPEEDRUN_COM_URL}/categories/${categoryId}?embed=game`,{timeout: 30000}),\n        fetchp(`${SPEEDRUN_COM_URL}/users/${userId}`,{timeout: 30000}),\n        fetchp(`${SPEEDRUN_COM_URL}/runs?user=${userId}${insertIfExists(levelId, \"&level=\", true)}&category=${categoryId}&max=200`,{timeout: 30000})\n    ]);\n\n\n    const [categoryData, userData, runsData] = await Promise.all([\n        categoryDataRaw.json<SRCResult<SRCCategory_g>>(),\n        userDataRaw.json<SRCResult<SRCUser>>(),\n        runsDataRaw.json<SRCResult<SRCRun[]>>(),\n    ]);\n\n    const subcategoryString = (await Promise.all([...searchParams.entries()].map(async ([key,value]: [string,string]) : Promise<string> => {\n        const dataRaw = await fetchp(`${SPEEDRUN_COM_URL}/variables/${key}`);\n        const data = await dataRaw.json<SRCResult<SRCVariable>>();\n\n        return data.data.values.values[value as string].label;\n    }))).join(\", \");\n\n    let levelName = \"\";\n\n    if(levelId) {\n        const levelDataRaw = await fetchp(`${SPEEDRUN_COM_URL}/levels/${levelId}`);\n        const levelData = await levelDataRaw.json<SRCResult<SRCLevel>>();\n\n        levelName = levelData.data.name;\n    }\n    \n    const runs = runsData.data\n        .filter(run=> run.status.status !== \"rejected\")\n        // only accept runs of the suggested subcategory\n        .filter(run=> Object.entries(run.values).every(([runKey, runValue] :[string, string]) => runValue as string === searchParams.get(runKey)))\n        .map(run => ({\n            date: DateTime.fromFormat(run.date, \"yyyy-MM-dd\", {zone: \"UTC\"}), \n            time: run.times.primary_t,\n            id: run.id\n        }))\n        // sort the runs, otherwise it will play connect the dots\n        .sort((first, second) => (\n            first.date === second.date\n                ? (first.time < second.time ? -1 : 1)\n                : (first.date < second.date ? -1 : 1)               \n        ));\n\n    return {\n        gameName: categoryData.data.game.data.names.international,\n        categoryName: categoryData.data.name,\n        subcategoryString,\n        username: userData.data.names.international,\n        levelName, \n        runs\n    };\n};\n\nconst GraphPage: FC = () => \n{\n    // note level id will be null when isIL is false.\n    const {userId, categoryId, levelId} = useParams<{userId?: string, categoryId?: string, levelId?: string}>();\n\n    const theChart = useRef<Chart.Chart| null>(null);\n\n    const searchParams = new URLSearchParams(useLocation().search);\n\n    const [data, loading, error] = useFetcher(fetcher, {userId, categoryId, levelId, searchParams});\n    if(error) return <ErrorAlert error={error} />;\n    if(loading) return <LoadingAlert/>;\n\n    const chartData = {\n        labels: data?.runs.map(run=>run.date),\n        datasets: [{\n            label: \"Time\",\n            data: data?.runs.map(run=>run.time),\n            borderColor: \"rgb(255,0,0)\",\n        }]\n    };\n\n    const onChartClick = () => {\n        // somehow the user clicked on the chart before the ref was set... shouldn't be possible\n        if(!theChart.current) return;\n        const activeElements = theChart.current.getActiveElements();\n        if(activeElements.length > 0) {\n            const run = data?.runs[activeElements[0].index];\n            window.location.href = `https://speedrun.com/run/${run?.id}`;\n        }\n    };\n\n    const chartOptions: Chart.ChartOptions = {\n        onClick: onChartClick,\n        responsive: true,\n        scales: {\n            x: {\n                type: \"time\",\n                time: {\n                    tooltipFormat: \"MMM d, yyyy\"\n                }\n            },\n            y: {\n                ticks: {\n                    // if this isn't a number we're *really* fucked\n                    callback: (value: number| string) => makeTimeHumanReadable(value as number)\n                }\n            }\n        },\n        plugins: {\n            tooltip: {\n                callbacks: {\n                    label: (tooltipItem: Chart.TooltipItem<\"line\">) => makeTimeHumanReadable(tooltipItem.parsed.y)\n                }\n            }\n        }\n    };\n\n    if(!data) return (<ErrorAlert error=\"There is no data but no error was thrown. Something is really fucked.\"></ErrorAlert>);\n\n\n\n\n    return (\n        <>\n            <h1>{data.gameName}: {insertIfExists(data.levelName,\" \")}{data.categoryName} - {insertIfExists(data.subcategoryString, \" - \")}{data.username}</h1>\n            <Link to={`/user/${userId}`} >Back to user</Link>\n            <p><b> Click a data-point to see the associated run&apos;s speedrun.com page!</b></p>\n            <Jumbotron>\n                <Line ref={theChart} type='line' data={chartData} options={chartOptions} />\n            </Jumbotron>\n        </>\n    );\n};\nexport default GraphPage;","import React, { useState, ChangeEvent, FormEvent, FC } from \"react\";\nimport { Search } from \"react-bootstrap-icons\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport { useHistory } from \"react-router\";\n\nconst SearchComponent: FC = () => {\n    const [search, setSearch] = useState<string>(\"\");\n    const history = useHistory();\n\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        setSearch(e.target.value);\n    };\n\n    const submit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        history.push(`/search/${search}`);\n    };\n    return (    \n        <Form inline onSubmit={submit}>\n            <InputGroup>\n                <Form.Control type=\"search\"  name=\"username\" id=\"searchInput\" placeholder=\"speedrun.com username\" value={search} onChange={handleChange}/>\n                <Button type=\"submit\"><Search/></Button>\n            </InputGroup>\n        </Form>\n    );\n};\n\nexport default SearchComponent;","import React, {  FC  } from \"react\";\n\nimport SearchComponent from \"../components/SearchComponent\";\n\nconst HomePage: FC = () => {\n\n\n    return (\n        <>\n            <h1> Welcome to the Speedrun PB Grapher</h1>\n            <h3> Enter your username to get started!</h3>\n            <SearchComponent />\n        </>\n    );\n};\n\nexport default HomePage;","import fetchp from \"fetch-jsonp\";\nimport React, {  FC } from \"react\";\nimport {Link, useParams} from \"react-router-dom\";\nimport { ErrorAlert, LoadingAlert } from \"../components/Alerts\";\nimport { SPEEDRUN_COM_URL } from \"../App\";\nimport { groupBy } from \"lodash\";\nimport { SRCResult, SRCUser, SRCVariableSet, SRCPB_gcl } from \"../types/SRCQueryResults\";\nimport useFetcher, { Fetcher } from \"../utils/useFetcher\";\n\ninterface Game {\n    name: string,\n    id: string,\n    fullGameCategories: Category[];\n    levelCategories: LevelCategory[]\n}\n\ninterface Category {\n    gameName: string;\n    gameId: string;\n    categoryName: string;\n    categoryId: string;\n\n    subcategories: Subcategory[];\n}\n\ninterface LevelCategory extends Category {\n    levelId: string,\n    levelName: string\n}\n\ninterface Subcategory {\n    subcategoryKeyId: string;\n    subcategoryValueId: string;\n    subcategoryValueName: string;\n}\n\ninterface UserData {\n    id: string;\n    name: string;\n    games: Game[];\n}\n\nconst fetcher: Fetcher<{id: string},UserData> = async ({id}) => {\n    const loadVariables = async (variables: SRCVariableSet): Promise<Subcategory[]> => {\n        return await Promise.all(Object.entries(variables).map(async ([key, value]: [string, unknown]) => {\n            const variableDataRaw = await fetchp(`${SPEEDRUN_COM_URL}/variables/${key}`);\n            const variableData = await variableDataRaw.json();\n            \n            return {\n                subcategoryKeyId: key,\n                subcategoryValueId: value as string,\n                subcategoryValueName: variableData.data.values.values[value as string].label\n            };\n        }));\n    };\n\n    const [userApiDataRaw, pbDataRaw] = await Promise.all([\n        fetchp(`${SPEEDRUN_COM_URL}/users/${id}`,{timeout: 30000}),\n        fetchp(`${SPEEDRUN_COM_URL}/users/${id}/personal-bests?embed=game,category,level`,{timeout: 30000})\n    ]);\n\n    const [userApiData, pbData] = await Promise.all([\n        userApiDataRaw.json<SRCResult<SRCUser>>(),\n        pbDataRaw.json<SRCResult<SRCPB_gcl[]>>()\n    ]);\n\n    const pbDataGrouped  = groupBy(pbData.data, pb => pb.category.data.type);\n\n    const pbDataFullGame = pbDataGrouped[\"per-game\"] ?? [];\n    const pbDataIL = pbDataGrouped[\"per-level\"] ?? [];\n    \n    const categoryDataFullGame: Category[] = (await Promise.all(pbDataFullGame.map(async pb => ({\n        gameName: pb.game.data.names.international,\n        gameId:  pb.game.data.id,\n        categoryName: pb.category.data.name,\n        categoryId: pb.category.data.id,\n\n        subcategories: await loadVariables(pb.run.values)\n    })))).sort((a: Category, b: Category) => {\n        if(a.categoryName < b.categoryName) return -1;\n        if(a.categoryName > b.categoryName) return 1;\n        if(a.subcategories.length == 0) return 0;\n        if(a.subcategories[0].subcategoryValueName < b.subcategories[0].subcategoryValueName) return -1;\n        if(a.subcategories[0].subcategoryValueName > b.subcategories[0].subcategoryValueName) return 1;\n        return 0;\n    });\n\n    const categoryDataILs: LevelCategory[] = (await Promise.all((pbDataIL.map(async pb => ({\n        gameName: pb.game.data.names.international,\n        gameId:  pb.game.data.id,\n        categoryName: pb.category.data.name,\n        categoryId: pb.category.data.id,\n        levelId: pb.level.data.id,\n        levelName: pb.level.data.name,\n\n        subcategories: await loadVariables(pb.run.values)        \n    }))))).sort((a: LevelCategory, b: LevelCategory) => {\n        if(a.levelName < b.levelName) return -1;\n        if(a.levelName > b.levelName) return 1;\n        if(a.categoryName < b.categoryName) return -1;\n        if(a.categoryName > b.categoryName) return 1;\n        if(a.subcategories.length == 0) return 0;\n        if(a.subcategories[0].subcategoryValueName < b.subcategories[0].subcategoryValueName) return -1;\n        if(a.subcategories[0].subcategoryValueName > b.subcategories[0].subcategoryValueName) return 1;\n\n        return 0;\n    });\n\n    const gameIds: string[] = [...new Set<string>(pbData.data.map(pb => pb.game.data.id))];\n\n    const games: Game[] = gameIds.map(id => {\n        const fullGameCategories = categoryDataFullGame.filter(category => category.gameId === id);\n        const levelCategories = categoryDataILs.filter(category => category.gameId === id);\n\n        return {\n            id,\n            name: fullGameCategories.length > 0 ? fullGameCategories[0].gameName : levelCategories[0].gameName,\n            fullGameCategories,\n            levelCategories,\n        };\n    });\n\n    return {\n        id: userApiData.data.id,\n        name: userApiData.data.names.international,\n        games: games\n    };\n};\n\nconst subcategoryLinkString = (subcategories: Subcategory[]): string => subcategories.length\n    ? \"?\" + subcategories.map((subcategory) => `${subcategory.subcategoryKeyId}=${subcategory.subcategoryValueId}`).join(\"&\")\n    : \"\";\n\nconst subcategoryTextString = (subcategories: Subcategory[]): string => subcategories.length\n    ? \" - \"+subcategories.map((subcategory) => subcategory.subcategoryValueName).join(\", \")\n    : \"\";\n\nconst UserPage: FC =  () => {\n    const {id} = useParams<{id: string}>();\n\n    const [data, loading, error] = useFetcher(fetcher,{id});\n\n    if(error) return <ErrorAlert error={error} />;\n    if(loading) return <LoadingAlert/>;\n\n    return (<>\n        <h1>Categories for {data?.name}</h1>\n        {data && data?.games?.length > 0 ? data?.games.map((game: Game) => (\n            <React.Fragment key={game.id}>\n                <h2> {game.name} </h2>\n                {game.fullGameCategories.length > 0 ? <h3>Full game runs:</h3> : <></>}\n                <ul>\n                    {game.fullGameCategories.map((category) => (\n                        <li key={JSON.stringify(category)}>\n                            <Link to={`/graph/${data.id}/${category.categoryId}${subcategoryLinkString(category.subcategories)}`}>\n                                {category.categoryName}{subcategoryTextString(category.subcategories)}\n                            </Link>\n                        </li>                \n                    ))}         \n                </ul>\n                {game.levelCategories.length > 0 ? <h3>IL runs:</h3> : <></>}\n                <ul>\n                    {game.levelCategories.map((category) => (\n                        <li key={JSON.stringify(category)}>\n                            <Link to={`/graph/il/${data.id}/${category.levelId}/${category.categoryId}?${subcategoryLinkString(category.subcategories)}`}>\n                                {category.levelName} {category.categoryName}{subcategoryTextString(category.subcategories)}\n                            </Link>\n                        </li>     \n                    ))}\n                </ul>\n            </React.Fragment>\n        )) : (<p>This user hasn&apos;t submitted any runs</p>)}\n    </>);\n};\n\nexport default UserPage;","import fetchp from \"fetch-jsonp\";\nimport React, { FC } from \"react\";\nimport { useLocation, useParams } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport { ErrorAlert, LoadingAlert } from \"../components/Alerts\";\nimport {SPEEDRUN_COM_URL} from \"../App\";\nimport { SRCPaginatedResult, SRCResult, SRCUser } from \"../types/SRCQueryResults\";\n\nimport useFetcher, {Fetcher} from \"../utils/useFetcher\";\n\ninterface Result {\n    id: string;\n    name: string;\n}\n\ninterface Results {\n    exactMatch: Result | null,\n    results: Result[],\n    hasNext: boolean\n}\n\nconst fetcher: Fetcher <{query: string, offset: number}, Results> = async ({query, offset}) => {\n    const [rawLookupData, rawSearchData] = await Promise.all([\n        fetchp(`${SPEEDRUN_COM_URL}/users?lookup=${query}`, {timeout: 30000}),\n        fetchp(`${SPEEDRUN_COM_URL}/users?name=${query}&offset=${offset}`, {timeout: 30000})\n    ]);\n    const [lookupData, searchData] = await Promise.all([\n        rawLookupData.json<SRCResult<SRCUser[]>>(),\n        rawSearchData.json<SRCPaginatedResult<SRCUser[]>>()\n    ]);\n\n    return {\n        exactMatch: lookupData.data.length > 0 ? {\n            id: lookupData.data[0].id,\n            name: lookupData.data[0].names.international\n        } : null,\n        results: searchData.data.map(user => ({id: user.id, name: user.names.international})),\n        hasNext: searchData.pagination.links.find(link => link.rel == \"next\") !== undefined\n    };\n};\n\n\nconst SearchPage: FC = () => {\n    const {query } = useParams<{query: string}>();\n    const searchParams = new URLSearchParams(useLocation().search);\n\n\n    const strOffset = searchParams.get(\"offset\");\n    const offset = strOffset ? parseInt(strOffset) : 0;\n\n    const [data, loading, error] = useFetcher(fetcher, {query, offset},[query,offset]);\n\n    if(error) return <ErrorAlert error={error} />;\n    if(loading) return <LoadingAlert/>;\n\n    return (\n        <>\n            <h3>Results for {query}:</h3>\n            <ul>\n                {data?.exactMatch && <p><b>An exact match was found: <Link to={`/user/${data.exactMatch.id}`}>{data.exactMatch.name} </Link></b></p> }\n                {data?.results && data.results.length > 0 ? data.results.map(({id, name}) => (\n                    <li key={id}><Link to={`/user/${id}`}>{name} </Link></li>\n                )) : (<p>No users found. <Link to=\"/\">Search again?</Link></p>)}\n            </ul>\n\n            {offset > 0 && (<Link to={`/search/${query}?offset=${Math.max(0, offset - 20)}`}>&lt;Prev</Link>)}\n            {offset > 0 && data?.hasNext && \" - \"}\n            {data?.hasNext && (<Link to={`/search/${query}?offset=${offset + 20}`}>Next &gt;</Link>)}\n        </>\n    );\n\n};\n\nexport default SearchPage;","import React, { FC } from \"react\";\n\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport GraphPage from \"./pages/GraphPage\";\n\nimport HomePage from \"./pages/HomePage\";\nimport UserPage from \"./pages/UserPage\";\n\nimport Container from \"react-bootstrap/Container\";\nimport { Nav, Navbar } from \"react-bootstrap\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport SearchPage from \"./pages/SearchPage\";\nimport SearchComponent from \"./components/SearchComponent\";\nimport { Github } from \"react-bootstrap-icons\";\n\n\nexport const SPEEDRUN_COM_URL = \"https://speedrun.com/api/v1\";\n\n\nconst App : FC = ()  => {\n    return (\n        <Router>\n            <Navbar bg=\"dark\" expand=\"lg\" className=\"mb-4\" style={{justifyContent:\"space-between\"}}>\n                <Nav>\n                    <Navbar.Brand href=\"#/\" style={{color: \"white\"}}>Speedrun PB Grapher</Navbar.Brand>\n                    <Nav.Link href=\"#/\" style={{color: \"white\"}}>Home</Nav.Link>\n                </Nav>\n                <Nav className=\"float-right\">\n                    <SearchComponent/>\n                    <Nav.Link href=\"https://github.com/Hurricane996/speedrun-pb-graph\"><Github style={{color: \"white\"}} className=\"ml-auto\"/></Nav.Link>\n                </Nav>\n            </Navbar>\n            <Container>\n                <Switch>\n                    <Route path=\"/user/:id\" exact>\n                        <UserPage />\n                    </Route>\n                    <Route path=\"/graph/il/:userId/:levelId/:categoryId\" exact>\n                        <GraphPage/>\n                    </Route>\n                    <Route path=\"/graph/:userId/:categoryId\" exact>\n                        <GraphPage/>\n                    </Route>\n                    <Route path=\"/search/:query\" exact>\n                        <SearchPage />\n                    </Route>\n                    <Route path=\"/\" exact>\n                        <HomePage/>\n                    </Route>\n                    <Route>404</Route>\n                </Switch>\n            </Container>\n        </Router>\n    );\n};\n\n\nexport default App;\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}