{"version":3,"sources":["components/Alerts.tsx","utils/makeTimeHumanReadable.ts","utils/useFetcher.ts","utils/insertIfExists.ts","utils/fetchWrapper.ts","pages/GraphPage.tsx","components/SearchComponent.tsx","pages/HomePage.tsx","pages/UserPage.tsx","pages/SearchPage.tsx","App.tsx","index.tsx"],"names":["ErrorAlert","error","Alert","variant","LoadingAlert","makeTimeHumanReadable","input","ms","s","Math","floor","m","h","msString","toFixed","slice","sString","mString","hString","useFetcher","fetcher","forceReload","useState","data","setData","loading","setLoading","setError","useEffect","a","newData","console","log","message","insertIfExists","text","delim","putDelimiterBefore","fetchWrapper","url","options","fetchJsonp","then","raw","json","userId","categoryId","levelId","searchParams","Error","Promise","all","SPEEDRUN_COM_URL","timeout","resolve","entries","map","key","value","values","label","categoryData","userData","runsData","levelData","subcategoryArr","runs","filter","run","status","Object","every","runKey","get","date","DateTime","fromFormat","zone","time","times","primary_t","id","sort","first","second","gameName","game","names","international","categoryName","name","subcategoryString","join","username","levelName","GraphPage","useParams","theChart","useRef","URLSearchParams","useLocation","search","chartData","labels","datasets","borderColor","chartOptions","onClick","current","activeElements","getActiveElements","length","index","window","location","href","responsive","scales","x","type","tooltipFormat","y","ticks","callback","plugins","tooltip","callbacks","tooltipItem","parsed","to","Jumbotron","ref","SearchComponent","setSearch","history","useHistory","Form","inline","onSubmit","e","preventDefault","push","InputGroup","Control","placeholder","onChange","target","Button","HomePage","loadVariables","variables","variableData","subcategoryKeyId","subcategoryValueId","subcategoryValueName","userApiData","pbData","pbDataGrouped","groupBy","pb","category","pbDataFullGame","pbDataIL","gameId","subcategories","categoryDataFullGame","b","level","categoryDataILs","gameIds","Set","games","fullGameCategories","levelCategories","subcategoryLinkString","subcategory","subcategoryTextString","UserPage","Fragment","JSON","stringify","query","offset","lookupData","searchData","exactMatch","results","user","hasNext","undefined","pagination","links","find","link","rel","SearchPage","strOffset","parseInt","max","App","Navbar","bg","expand","className","style","justifyContent","paddingLeft","paddingRight","Nav","Brand","color","Link","Container","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kRAMaA,EAA8B,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAF,OACvC,eAACC,EAAA,EAAD,CAAOC,QAAQ,SAAf,+BAA2CF,MAGlCG,EAAmB,kBAC5B,cAACF,EAAA,EAAD,CAAOC,QAAQ,OAAf,yBCIWE,EAfe,SAACC,GAC3B,IAAMC,EAAKD,EAAQ,EACbE,EAAIC,KAAKC,MAAMJ,GAAS,GACxBK,EAAIF,KAAKC,MAAMJ,EAAQ,IAAM,GAC7BM,EAAIH,KAAKC,MAAMJ,EAAQ,MAEvBO,EAAkB,IAAPN,EAAW,GAAKA,EAAGO,QAAQ,GAAGC,MAAM,GAE/CC,EAAUR,EAAI,GAAJ,WAAaA,GAAb,UAAsBA,GAEhCS,EAAUN,EAAI,GAAJ,WAAaA,GAAb,UAAsBA,GAChCO,EAAgB,IAANN,EAAU,GAAV,UAAkBA,EAAlB,KAEhB,MAAM,GAAN,OAAUM,GAAV,OAAoBD,EAApB,YAA+BD,GAA/B,OAAyCH,ICY9BM,EArBI,SAAiBC,EAAmCd,EAAee,GAAoE,IAAD,EAC7HC,mBAAuB,MADsG,mBAC9IC,EAD8I,KACxIC,EADwI,OAEvHF,oBAAkB,GAFqG,mBAE9IG,EAF8I,KAErIC,EAFqI,OAG3HJ,mBAAsB,MAHqG,mBAG9IrB,EAH8I,KAGvI0B,EAHuI,KAkBrJ,OAbAC,qBAAU,WAAO,sBAAC,4BAAAC,EAAA,6DACdH,GAAW,GADG,kBAGYN,EAAQd,GAHpB,OAGJwB,EAHI,OAIVN,EAAQM,GACRC,QAAQC,IAAI,qBACZN,GAAW,GAND,kDAQVK,QAAQ9B,MAAR,MACA0B,EAAS,KAAEM,SATD,yDAAD,KAAR,OAWFZ,QAXE,IAWFA,IAAe,IAEf,CAACE,EAAME,EAASxB,IClBZiC,EAJQ,SAACC,EAAwBC,EAAeC,GAAxC,OAAiFA,EACjGF,EAAOC,EAAQD,EAAO,GACtBA,EAAOA,EAAOC,EAAQ,I,iBCEdE,EAFG,uCAAG,WAAUC,EAAaC,GAAvB,SAAAX,EAAA,+EAAmEY,IAAWF,EAAIC,GAASE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,WAA3G,2CAAH,wDCkCZxB,EAA0C,uCAAG,mDAAAS,EAAA,yDAAQgB,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,WAAYC,EAA5B,EAA4BA,QAASC,EAArC,EAAqCA,aAChFH,EAD2C,sBAC7B,IAAII,MAAM,wBADmB,UAE3CH,EAF2C,sBAEzB,IAAIG,MAAM,wBAFe,uBAI6BC,QAAQC,IAAI,CACpFb,EAAY,UAA8Bc,EAA9B,uBAA6DN,EAA7D,eAAqF,CAACO,QAAS,MAC3Gf,EAAY,UAAwBc,EAAxB,kBAAkDP,GAAS,CAACQ,QAAS,MACjFf,EAAY,UAAyBc,EAAzB,sBAAuDP,GAAvD,OAAgEX,EAAea,EAAS,WAAW,GAAnG,qBAAqHD,EAArH,YAA0I,CAACO,QAAS,MAChKN,EAAUT,EAAY,UAAyBc,EAAzB,mBAAoDL,GAAW,CAACM,QAAS,MAAUH,QAAQI,QAAc,MAG/HJ,QAAQC,IAAI,YAAIH,EAAaO,WAAWC,IAA5B,uCAAgC,mCAAA3B,EAAA,gFAAQ4B,EAAR,KAAYC,EAAZ,cACrBpB,EAAY,UAA4Bc,EAA5B,sBAA0DK,GAAO,CAACJ,QAAS,MADlE,cAClC9B,EADkC,yBAGjCA,EAAKA,KAAKoC,OAAOA,OAAOD,GAAiBE,OAHR,2CAAhC,0DAX+B,0CAIxCC,EAJwC,KAI1BC,EAJ0B,KAIhBC,EAJgB,KAINC,EAJM,KAIKC,EAJL,KAkBzCC,EAAOH,EAASxC,KACjB4C,QAAO,SAAAC,GAAG,MAAyB,aAAtBA,EAAIC,OAAOA,UAExBF,QAAO,SAAAC,GAAG,OAAGE,OAAOf,QAAQa,EAAIT,QAAQY,OAAM,mCAAEC,EAAF,mBAAiExB,EAAayB,IAAID,SAChIhB,KAAI,SAAAY,GAAG,MAAK,CACTM,KAAMC,WAASC,WAAWR,EAAIM,KAAM,aAAc,CAACG,KAAM,QACzDC,KAAMV,EAAIW,MAAMC,UAChBC,GAAIb,EAAIa,OAGXC,MAAK,SAACC,EAAOC,GAAR,OACFD,EAAMT,OAASU,EAAOV,KACfS,EAAML,KAAOM,EAAON,MAAQ,EAAI,EAChCK,EAAMT,KAAOU,EAAOV,MAAQ,EAAI,KA/BA,kBAkCxC,CACHW,SAAUxB,EAAatC,KAAK+D,KAAK/D,KAAKgE,MAAMC,cAC5CC,aAAc5B,EAAatC,KAAKmE,KAChCC,kBAAmB1B,EAAe2B,KAAK,MACvCC,SAAU/B,EAASvC,KAAKgE,MAAMC,cAC9BM,UAAW9B,EAAYA,EAAUzC,KAAKmE,KAAO,GAC7CxB,SAxC2C,4CAAH,sDAgHjC6B,EApEO,WAAO,IAAD,EACcC,cAA/BnD,EADiB,EACjBA,OAAQC,EADS,EACTA,WAAYC,EADH,EACGA,QAErBkD,EAAWC,iBAA0B,MAErClD,EAAe,IAAImD,gBAAgBC,cAAcC,QAL/B,EAOOlF,EAAWC,EAAS,CAACyB,SAAQC,aAAYC,UAASC,iBAPzD,mBAOjBzB,EAPiB,KAOXE,EAPW,KAOFxB,EAPE,KAQxB,GAAGA,EAAO,OAAO,cAAC,EAAD,CAAYA,MAAOA,IACpC,GAAGwB,EAAS,OAAO,cAAC,EAAD,IAEnB,IAAM6E,EAAY,CACdC,OAAM,OAAEhF,QAAF,IAAEA,OAAF,EAAEA,EAAM2C,KAAKV,KAAI,SAAAY,GAAG,OAAEA,EAAIM,QAChC8B,SAAU,CAAC,CACP5C,MAAO,OACPrC,KAAI,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAM2C,KAAKV,KAAI,SAAAY,GAAG,OAAEA,EAAIU,QAC9B2B,YAAa,kBAcfC,EAAmC,CACrCC,QAXiB,WAEjB,GAAIV,EAASW,QAAb,CACA,IAAMC,EAAiBZ,EAASW,QAAQE,oBACxC,GAAGD,EAAeE,OAAS,EAAG,CAC1B,IAAM3C,EAAG,OAAG7C,QAAH,IAAGA,OAAH,EAAGA,EAAM2C,KAAK2C,EAAe,GAAGG,OACzCC,OAAOC,SAASC,KAAhB,0CAAmD/C,QAAnD,IAAmDA,OAAnD,EAAmDA,EAAKa,OAM5DmC,YAAY,EACZC,OAAQ,CACJC,EAAG,CACCC,KAAM,OACNzC,KAAM,CACF0C,cAAe,gBAGvBC,EAAG,CACCC,MAAO,CAEHC,SAAU,SAACjE,GAAD,OAA2BrD,EAAsBqD,OAIvEkE,QAAS,CACLC,QAAS,CACLC,UAAW,CACPlE,MAAO,SAACmE,GAAD,OAA4C1H,EAAsB0H,EAAYC,OAAOP,QAM5G,OACI,qCACI,sCAAKlG,QAAL,IAAKA,OAAL,EAAKA,EAAM8D,SAAX,KAAuBnD,EAAc,OAACX,QAAD,IAACA,OAAD,EAACA,EAAMuE,UAAU,KAAtD,OAA4DvE,QAA5D,IAA4DA,OAA5D,EAA4DA,EAAMkE,aAAlE,MAAmFvD,EAAc,OAACX,QAAD,IAACA,OAAD,EAACA,EAAMoE,kBAAmB,OAA3H,OAAmIpE,QAAnI,IAAmIA,OAAnI,EAAmIA,EAAMsE,YACzI,cAAC,IAAD,CAAMoC,GAAE,gBAAWpF,GAAnB,0BACA,4BAAG,qGACH,cAACqF,EAAA,EAAD,UACI,cAAC,IAAD,CAAMC,IAAKlC,EAAUsB,KAAK,OAAOhG,KAAM+E,EAAW9D,QAASkE,U,mCChH5D0B,EAvBa,WAAO,IAAD,EACF9G,mBAAiB,IADf,mBACvB+E,EADuB,KACfgC,EADe,KAExBC,EAAUC,cAWhB,OACI,cAACC,EAAA,EAAD,CAAMC,QAAM,EAACC,SALF,SAACC,GACZA,EAAEC,iBACFN,EAAQO,KAAR,kBAAwBxC,KAGxB,SACI,eAACyC,EAAA,EAAD,WACI,cAACN,EAAA,EAAKO,QAAN,CAAcxB,KAAK,SAAU7B,KAAK,WAAWT,GAAG,cAAc+D,YAAY,wBAAwBtF,MAAO2C,EAAQ4C,SAZxG,SAACN,GAClBA,EAAEC,iBACFP,EAAUM,EAAEO,OAAOxF,UAWX,cAACyF,EAAA,EAAD,CAAQ5B,KAAK,SAAb,SAAsB,cAAC,IAAD,YCVvB6B,EAVM,WACjB,OACI,qCACI,qEACA,sEACA,cAAC,EAAD,Q,SCgCNhI,EAAuC,uCAAG,yDAAAS,EAAA,6DAAQoD,EAAR,EAAQA,GAC9CoE,EADsC,+BAAAxH,EAAA,MACtB,WAAOyH,GAAP,SAAAzH,EAAA,sEACLqB,QAAQC,IAAImB,OAAOf,QAAQ+F,GAAW9F,IAA1B,iBAAAc,OAAA,IAAAA,CAAA,UAA8B,mCAAAzC,EAAA,gFAAQ4B,EAAR,KAAaC,EAAb,cACxBpB,EAAY,UAA4Bc,EAA5B,sBAA0DK,GAAM,CAACJ,QAAQ,MAD7D,cAC7CkG,EAD6C,yBAG5C,CACHC,iBAAkB/F,EAClBgG,mBAAoB/F,EACpBgG,qBAAsBH,EAAahI,KAAKoC,OAAOA,OAAOD,GAAiBE,QANxB,2CAA9B,wDADP,mFADsB,+DAaRV,QAAQC,IAAI,CAC5Cb,EAAY,UAAwBc,EAAxB,kBAAkD6B,GAAK,CAAC5B,QAAS,MAC7Ef,EAAY,UAA4Bc,EAA5B,kBAAsD6B,EAAtD,6CAAoG,CAAC5B,QAAS,QAflF,0CAarCsG,EAbqC,KAaxBC,EAbwB,KAkBtCC,EAAiBC,kBAAQF,EAAOrI,MAAM,SAAAwI,GAAE,OAAIA,EAAGC,SAASzI,KAAKgG,QAE7D0C,EApBsC,UAoBrBJ,EAAc,mBApBO,QAoBQ,GAC9CK,EArBsC,UAqB3BL,EAAc,oBArBa,QAqBG,GArBH,UAuBI3G,QAAQC,IAAI8G,EAAezG,IAAf,uCAAmB,WAAMuG,GAAN,SAAAlI,EAAA,kEACjEkI,EAAGzE,KAAK/D,KAAKgE,MAAMC,cAD8C,KAElEuE,EAAGzE,KAAK/D,KAAK0D,GAFqD,KAG7D8E,EAAGC,SAASzI,KAAKmE,KAH4C,KAI/DqE,EAAGC,SAASzI,KAAK0D,GAJ8C,SAMtDoE,EAAcU,EAAG3F,IAAIT,QANiC,6CAC3E0B,SAD2E,KAE3E8E,OAF2E,KAG3E1E,aAH2E,KAI3E3C,WAJ2E,KAM3EsH,cAN2E,kDAAnB,wDAvBhB,eAuBtCC,EAvBsC,OA8BtCnF,MAAK,SAACrD,EAAayI,GACrB,OAAGzI,EAAE4D,aAAe6E,EAAE7E,cAAsB,EACzC5D,EAAE4D,aAAe6E,EAAE7E,aAAqB,EACd,GAA1B5D,EAAEuI,cAAcrD,OAAoB,EACpClF,EAAEuI,cAAc,GAAGV,qBAAuBY,EAAEF,cAAc,GAAGV,sBAA8B,EAC3F7H,EAAEuI,cAAc,GAAGV,qBAAuBY,EAAEF,cAAc,GAAGV,qBAA6B,EACtF,KApCiC,UAuCIxG,QAAQC,IAAK+G,EAAS1G,IAAT,uCAAa,WAAMuG,GAAN,SAAAlI,EAAA,kEAC5DkI,EAAGzE,KAAK/D,KAAKgE,MAAMC,cADyC,KAE7DuE,EAAGzE,KAAK/D,KAAK0D,GAFgD,KAGxD8E,EAAGC,SAASzI,KAAKmE,KAHuC,KAI1DqE,EAAGC,SAASzI,KAAK0D,GAJyC,KAK7D8E,EAAGQ,MAAMhJ,KAAK0D,GAL+C,KAM3D8E,EAAGQ,MAAMhJ,KAAKmE,KAN6C,SAQjD2D,EAAcU,EAAG3F,IAAIT,QAR4B,6CACtE0B,SADsE,KAEtE8E,OAFsE,KAGtE1E,aAHsE,KAItE3C,WAJsE,KAKtEC,QALsE,KAMtE+C,UANsE,KAQtEsE,cARsE,mDAAb,wDAvCjB,eAuCtCI,EAvCsC,OAgDrCtF,MAAK,SAACrD,EAAkByI,GAC3B,OAAGzI,EAAEiE,UAAYwE,EAAExE,WAAmB,EACnCjE,EAAEiE,UAAYwE,EAAExE,UAAkB,EAClCjE,EAAE4D,aAAe6E,EAAE7E,cAAsB,EACzC5D,EAAE4D,aAAe6E,EAAE7E,aAAqB,EACd,GAA1B5D,EAAEuI,cAAcrD,OAAoB,EACpClF,EAAEuI,cAAc,GAAGV,qBAAuBY,EAAEF,cAAc,GAAGV,sBAA8B,EAC3F7H,EAAEuI,cAAc,GAAGV,qBAAuBY,EAAEF,cAAc,GAAGV,qBAA6B,EAEtF,KAGLe,EA5DsC,YA4Dd,IAAIC,IAAYd,EAAOrI,KAAKiC,KAAI,SAAAuG,GAAE,OAAIA,EAAGzE,KAAK/D,KAAK0D,QAE3E0F,EAAgBF,EAAQjH,KAAI,SAAAyB,GAC9B,IAAM2F,EAAqBP,EAAqBlG,QAAO,SAAA6F,GAAQ,OAAIA,EAASG,SAAWlF,KACjF4F,EAAkBL,EAAgBrG,QAAO,SAAA6F,GAAQ,OAAIA,EAASG,SAAWlF,KAE/E,MAAO,CACHA,KACAS,KAAMkF,EAAmB7D,OAAS,EAAI6D,EAAmB,GAAGvF,SAAWwF,EAAgB,GAAGxF,SAC1FuF,qBACAC,sBAtEoC,kBA0ErC,CACH5F,GAAI0E,EAAYpI,KAAK0D,GACrBS,KAAMiE,EAAYpI,KAAKgE,MAAMC,cAC7BmF,MAAOA,IA7EiC,4CAAH,sDAiFvCG,EAAwB,SAACV,GAAD,OAA0CA,EAAcrD,OAChF,IAAMqD,EAAc5G,KAAI,SAACuH,GAAD,gBAAoBA,EAAYvB,iBAAhC,YAAoDuB,EAAYtB,uBAAsB7D,KAAK,KACnH,IAEAoF,EAAwB,SAACZ,GAAD,OAA0CA,EAAcrD,OAChF,MAAMqD,EAAc5G,KAAI,SAACuH,GAAD,OAAiBA,EAAYrB,wBAAsB9D,KAAK,MAChF,IA0CSqF,EAxCO,WAAO,IAAD,EACjBhG,EAAMe,cAANf,GADiB,EAGO9D,EAAWC,EAAQ,CAAC6D,OAH3B,mBAGjB1D,EAHiB,KAGXE,EAHW,KAGFxB,EAHE,KAKxB,OAAGA,EAAc,cAAC,EAAD,CAAYA,MAAOA,IACjCwB,EAAgB,cAAC,EAAD,IAGf,qCACI,wDAAoBF,QAApB,IAAoBA,OAApB,EAAoBA,EAAMmE,QACzBnE,IAAY,OAAJA,QAAI,IAAJA,GAAA,UAAAA,EAAMoJ,aAAN,eAAa5D,QAAS,EAA9B,OAAkCxF,QAAlC,IAAkCA,OAAlC,EAAkCA,EAAMoJ,MAAMnH,KAAI,SAAC8B,GAAD,OAC/C,eAAC,IAAM4F,SAAP,WACI,mCAAM5F,EAAKI,KAAX,OACCJ,EAAKsF,mBAAmB7D,OAAS,EAAI,iDAA2B,6BACjE,6BACKzB,EAAKsF,mBAAmBpH,KAAI,SAACwG,GAAD,OACzB,6BACI,eAAC,IAAD,CAAM/B,GAAE,iBAAY1G,EAAK0D,GAAjB,YAAuB+E,EAASlH,YAAhC,OAA6CgI,EAAsBd,EAASI,gBAApF,UACKJ,EAASvE,aAAcuF,EAAsBhB,EAASI,mBAFtDe,KAAKC,UAAUpB,SAO/B1E,EAAKuF,gBAAgB9D,OAAS,EAAI,0CAAoB,6BACvD,6BACKzB,EAAKuF,gBAAgBrH,KAAI,SAACwG,GAAD,OACtB,6BACI,eAAC,IAAD,CAAM/B,GAAE,oBAAe1G,EAAK0D,GAApB,YAA0B+E,EAASjH,QAAnC,YAA8CiH,EAASlH,WAAvD,YAAqEgI,EAAsBd,EAASI,gBAA5G,UACKJ,EAASlE,UADd,IAC0BkE,EAASvE,aAAcuF,EAAsBhB,EAASI,mBAF3Ee,KAAKC,UAAUpB,WAff1E,EAAKL,OAuBxB,wE,2BChJZ7D,G,OAA2D,uCAAG,uCAAAS,EAAA,6DAAQwJ,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OAAf,SACzBpI,QAAQC,IAAI,CAC/Cb,EAAY,UAA0Bc,EAA1B,yBAA2DiI,GAAS,CAAChI,QAAS,MAC1Ff,EAAY,UAAmCc,EAAnC,uBAAkEiI,EAAlE,mBAAkFC,GAAU,CAACjI,QAAS,QAHtD,0CACzDkI,EADyD,KAC7CC,EAD6C,uBAMzD,CACHC,WAAYF,EAAWhK,KAAKwF,OAAS,EAAI,CACrC9B,GAAIsG,EAAWhK,KAAK,GAAG0D,GACvBS,KAAM6F,EAAWhK,KAAK,GAAGgE,MAAMC,eAC/B,KACJkG,QAASF,EAAWjK,KAAKiC,KAAI,SAAAmI,GAAI,MAAK,CAAC1G,GAAI0G,EAAK1G,GAAIS,KAAMiG,EAAKpG,MAAMC,kBACrEoG,aAA0EC,IAAjEL,EAAWM,WAAWC,MAAMC,MAAK,SAAAC,GAAI,MAAgB,QAAZA,EAAKC,SAZK,2CAAH,uDA8ClDC,EA7BQ,WAAO,IACnBd,EAAUrF,cAAVqF,MAGDe,EAFe,IAAIjG,gBAAgBC,cAAcC,QAExB5B,IAAI,UAC7B6G,EAASc,EAAYC,SAASD,GAAa,EALxB,EAOMjL,EAAWC,EAAS,CAACiK,QAAOC,UAAQ,CAACD,EAAMC,IAPjD,mBAOlB/J,EAPkB,KAOZE,EAPY,KAOHxB,EAPG,KASzB,OAAGA,EAAc,cAAC,EAAD,CAAYA,MAAOA,IACjCwB,EAAgB,cAAC,EAAD,IAGf,qCACI,8CAAiB4J,EAAjB,OACA,gCACS,OAAJ9J,QAAI,IAAJA,OAAA,EAAAA,EAAMkK,aAAc,4BAAG,2DAA6B,eAAC,IAAD,CAAMxD,GAAE,gBAAW1G,EAAKkK,WAAWxG,IAAnC,UAA0C1D,EAAKkK,WAAW/F,KAA1D,aAChD,OAAJnE,QAAI,IAAJA,OAAA,EAAAA,EAAMmK,UAAWnK,EAAKmK,QAAQ3E,OAAS,EAAIxF,EAAKmK,QAAQlI,KAAI,gBAAEyB,EAAF,EAAEA,GAAIS,EAAN,EAAMA,KAAN,OACzD,6BAAa,eAAC,IAAD,CAAMuC,GAAE,gBAAWhD,GAAnB,UAA0BS,EAA1B,QAAJT,MACP,iDAAmB,cAAC,IAAD,CAAMgD,GAAG,IAAT,iCAG5BqD,EAAS,GAAM,cAAC,IAAD,CAAMrD,GAAE,kBAAaoD,EAAb,mBAA6B5K,KAAK6L,IAAI,EAAGhB,EAAS,KAA1D,mBACfA,EAAS,IAAT,OAAc/J,QAAd,IAAcA,OAAd,EAAcA,EAAMqK,UAAW,OAC3B,OAAJrK,QAAI,IAAJA,OAAA,EAAAA,EAAMqK,UAAY,cAAC,IAAD,CAAM3D,GAAE,kBAAaoD,EAAb,mBAA6BC,EAAS,IAA9C,wB,SClDlBlI,EAAmB,8BAwCjBmJ,EAtCE,WACb,OACI,eAAC,IAAD,WACI,eAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,OAAO,KAAKC,UAAU,OAAOC,MAAO,CAACC,eAAe,gBAAiBC,YAAa,MAAOC,aAAc,OAAzH,UACI,eAACC,EAAA,EAAD,WACI,cAACR,EAAA,EAAOS,MAAR,CAAc9F,KAAK,KAAKyF,MAAO,CAACM,MAAO,SAAvC,iCACA,cAACF,EAAA,EAAIG,KAAL,CAAUhG,KAAK,KAAKyF,MAAO,CAACM,MAAO,SAAnC,qBAEJ,eAACF,EAAA,EAAD,CAAKL,UAAU,cAAf,UACI,cAAC,EAAD,IACA,cAACK,EAAA,EAAIG,KAAL,CAAUhG,KAAK,oDAAf,SAAmE,cAAC,IAAD,CAAQyF,MAAO,CAACM,MAAO,SAAUP,UAAU,oBAGtH,cAACS,EAAA,EAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAK,YAAYC,OAAK,EAA7B,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOD,KAAK,yCAAyCC,OAAK,EAA1D,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOD,KAAK,6BAA6BC,OAAK,EAA9C,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOD,KAAK,iBAAiBC,OAAK,EAAlC,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOD,KAAK,IAAIC,OAAK,EAArB,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,2BCxCpBC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.60990125.chunk.js","sourcesContent":["import React, {FC} from \"react\";\nimport Alert from \"react-bootstrap/esm/Alert\";\n\ninterface ErrorProps {\n    error: string;\n}\nexport const ErrorAlert : FC<ErrorProps> = ({error} : ErrorProps) => (\n    <Alert variant=\"danger\">An error occured: {error}</Alert>\n);\n\nexport const LoadingAlert: FC = () => (\n    <Alert variant=\"info\">Loading...</Alert>\n);","const makeTimeHumanReadable = (input: number): string => {\n    const ms = input % 1;\n    const s = Math.floor(input) % 60;\n    const m = Math.floor(input / 60) % 60;\n    const h = Math.floor(input / 3600);\n\n    const msString = ms === 0 ? \"\" : ms.toFixed(3).slice(1);\n\n    const sString = s < 10 ? `0${s}` : `${s}`;\n\n    const mString = m < 10 ? `0${m}` : `${m}`;\n    const hString = h === 0 ? \"\" : `${h}:`;\n\n    return `${hString}${mString}:${sString}${msString}`;\n};\nexport default makeTimeHumanReadable;","import { useEffect, useState } from \"react\";\n\nexport type Fetcher<InType,OutType> = (input: InType) => Promise<OutType>;\n\nconst useFetcher = <InType,OutType>(fetcher: Fetcher<InType, OutType>, input: InType, forceReload?: unknown[]) : [OutType|null, boolean, string|null] => {\n    const [data, setData] = useState<OutType|null>(null);\n    const [loading, setLoading] = useState<boolean>(true);\n    const [error, setError] = useState<string|null>(null);\n\n    useEffect(() => {(async () => {\n        setLoading(true);\n        try {\n            const newData = await fetcher(input);\n            setData(newData);\n            console.log(\"Data has been set\");\n            setLoading(false);\n        } catch (e) {\n            console.error(e);\n            setError(e.message);\n        }\n    })();},forceReload ?? []);\n\n    return [data, loading, error];\n};\n\nexport default useFetcher;\n","const insertIfExists = (text: string|undefined, delim: string, putDelimiterBefore?: boolean): string => putDelimiterBefore\n    ? (text ? delim + text : \"\") \n    : (text ? text + delim : \"\") \n;\nexport default insertIfExists;","import fetchJsonp from \"fetch-jsonp\";\n\nconst fetchWrapper = async <T>(url: string, options: fetchJsonp.Options): Promise<T> => fetchJsonp(url,options).then(raw => raw.json<T>());\n\nexport default fetchWrapper;","import React, { FC, useRef } from \"react\";\nimport { useLocation, useParams } from \"react-router\";\nimport { SPEEDRUN_COM_URL } from \"../App\";\nimport { Line} from \"react-chartjs-2\";\nimport \"chartjs-adapter-luxon\";\nimport { DateTime } from \"luxon\";\nimport { Link } from \"react-router-dom\";\nimport { Jumbotron } from \"react-bootstrap\";\nimport { ErrorAlert, LoadingAlert } from \"../components/Alerts\";\nimport { SRCCategory_g, SRCLevel, SRCResult, SRCRun, SRCUser, SRCVariable } from \"../types/SRCQueryResults\";\nimport Chart from \"chart.js\";\nimport makeTimeHumanReadable from \"../utils/makeTimeHumanReadable\";\nimport useFetcher, { Fetcher } from \"../utils/useFetcher\";\nimport insertIfExists from \"../utils/insertIfExists\";\nimport fetchWrapper from \"../utils/fetchWrapper\";\n\ninterface FetchedData {\n    gameName: string;\n    categoryName: string;\n    levelName: string;\n    subcategoryString: string;\n    username: string;\n    runs: {\n        date: DateTime;\n        time: number;\n        id: string;\n    }[];\n}\n\ninterface FetcherInput {\n    userId: string|undefined;\n    categoryId: string|undefined;\n    levelId: string|undefined;\n    searchParams: URLSearchParams;\n}\n\nconst fetcher: Fetcher<FetcherInput,FetchedData> = async ({userId, categoryId, levelId, searchParams}) => {\n    if(!userId) throw new Error(\"No user id provided!\");\n    if(!categoryId) throw new Error(\"No user id provided!\");\n\n    const [categoryData, userData, runsData, levelData, subcategoryArr] = await Promise.all([\n        fetchWrapper<SRCResult<SRCCategory_g>>(`${SPEEDRUN_COM_URL}/categories/${categoryId}?embed=game`,{timeout: 30000}),\n        fetchWrapper<SRCResult<SRCUser>>(`${SPEEDRUN_COM_URL}/users/${userId}`,{timeout: 30000}),\n        fetchWrapper<SRCResult<SRCRun[]>>(`${SPEEDRUN_COM_URL}/runs?user=${userId}${insertIfExists(levelId, \"&level=\", true)}&category=${categoryId}&max=200`,{timeout: 30000}),\n        levelId ? fetchWrapper<SRCResult<SRCLevel>>(`${SPEEDRUN_COM_URL}/levels/${levelId}`, {timeout: 30000}) : Promise.resolve<null>(null),\n\n        // load all of the subcategories\n        Promise.all([...searchParams.entries()].map(async ([key,value]: [string,string]) : Promise<string> => {\n            const data = await fetchWrapper<SRCResult<SRCVariable>>(`${SPEEDRUN_COM_URL}/variables/${key}`, {timeout: 30000});\n    \n            return data.data.values.values[value as string].label;\n        }))\n    ]);\n    \n    const runs = runsData.data\n        .filter(run=> run.status.status !== \"rejected\")\n        // only accept runs of the suggested subcategory\n        .filter(run=> Object.entries(run.values).every(([runKey, runValue] :[string, string]) => runValue as string === searchParams.get(runKey)))\n        .map(run => ({\n            date: DateTime.fromFormat(run.date, \"yyyy-MM-dd\", {zone: \"UTC\"}), \n            time: run.times.primary_t,\n            id: run.id\n        }))\n        // sort the runs, otherwise it will play connect the dots\n        .sort((first, second) => (\n            first.date === second.date\n                ? (first.time < second.time ? -1 : 1)\n                : (first.date < second.date ? -1 : 1)               \n        ));\n\n    return {\n        gameName: categoryData.data.game.data.names.international,\n        categoryName: categoryData.data.name,\n        subcategoryString: subcategoryArr.join(\", \"),\n        username: userData.data.names.international,\n        levelName: levelData ? levelData.data.name : \"\", \n        runs\n    };\n};\n\nconst GraphPage: FC = () => {\n    const {userId, categoryId, levelId} = useParams<{userId?: string; categoryId?: string; levelId?: string}>();\n\n    const theChart = useRef<Chart.Chart| null>(null);\n\n    const searchParams = new URLSearchParams(useLocation().search);\n\n    const [data, loading, error] = useFetcher(fetcher, {userId, categoryId, levelId, searchParams});\n    if(error) return <ErrorAlert error={error} />;\n    if(loading) return <LoadingAlert/>;\n\n    const chartData = {\n        labels: data?.runs.map(run=>run.date),\n        datasets: [{\n            label: \"Time\",\n            data: data?.runs.map(run=>run.time),\n            borderColor: \"rgb(255,0,0)\",\n        }]\n    };\n\n    const onChartClick = () => {\n        // somehow the user clicked on the chart before the ref was set... shouldn't be possible\n        if(!theChart.current) return;\n        const activeElements = theChart.current.getActiveElements();\n        if(activeElements.length > 0) {\n            const run = data?.runs[activeElements[0].index];\n            window.location.href = `https://speedrun.com/run/${run?.id}`;\n        }\n    };\n\n    const chartOptions: Chart.ChartOptions = {\n        onClick: onChartClick,\n        responsive: true,\n        scales: {\n            x: {\n                type: \"time\",\n                time: {\n                    tooltipFormat: \"MMM d, yyyy\"\n                }\n            },\n            y: {\n                ticks: {\n                    // if this isn't a number we're *really* fucked\n                    callback: (value: number| string) => makeTimeHumanReadable(value as number)\n                }\n            }\n        },\n        plugins: {\n            tooltip: {\n                callbacks: {\n                    label: (tooltipItem: Chart.TooltipItem<\"line\">) => makeTimeHumanReadable(tooltipItem.parsed.y)\n                }\n            }\n        }\n    };\n\n    return (\n        <>\n            <h1>{data?.gameName}: {insertIfExists(data?.levelName,\" \")}{data?.categoryName} - {insertIfExists(data?.subcategoryString, \" - \")}{data?.username}</h1>\n            <Link to={`/user/${userId}`} >Back to user</Link>\n            <p><b> Click a data-point to see the associated run&apos;s speedrun.com page!</b></p>\n            <Jumbotron>\n                <Line ref={theChart} type='line' data={chartData} options={chartOptions} />\n            </Jumbotron>\n        </>\n    );\n};\n\nexport default GraphPage;","import React, { useState, ChangeEvent, FormEvent, FC } from \"react\";\nimport { Search } from \"react-bootstrap-icons\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport { useHistory } from \"react-router\";\n\nconst SearchComponent: FC = () => {\n    const [search, setSearch] = useState<string>(\"\");\n    const history = useHistory();\n\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        setSearch(e.target.value);\n    };\n\n    const submit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        history.push(`/search/${search}`);\n    };\n    return (    \n        <Form inline onSubmit={submit}>\n            <InputGroup>\n                <Form.Control type=\"search\"  name=\"username\" id=\"searchInput\" placeholder=\"speedrun.com username\" value={search} onChange={handleChange}/>\n                <Button type=\"submit\"><Search/></Button>\n            </InputGroup>\n        </Form>\n    );\n};\n\nexport default SearchComponent;","import React, {  FC  } from \"react\";\n\nimport SearchComponent from \"../components/SearchComponent\";\n\nconst HomePage: FC = () => {\n    return (\n        <>\n            <h1> Welcome to the Speedrun PB Grapher</h1>\n            <h3> Enter your username to get started!</h3>\n            <SearchComponent />\n        </>\n    );\n};\n\nexport default HomePage;","import React, {  FC } from \"react\";\nimport {Link, useParams} from \"react-router-dom\";\nimport { ErrorAlert, LoadingAlert } from \"../components/Alerts\";\nimport { SPEEDRUN_COM_URL } from \"../App\";\nimport { groupBy } from \"lodash\";\nimport { SRCResult, SRCUser, SRCVariableSet, SRCPB_gcl, SRCVariable } from \"../types/SRCQueryResults\";\nimport useFetcher, { Fetcher } from \"../utils/useFetcher\";\nimport fetchWrapper from \"../utils/fetchWrapper\";\n\ninterface Game {\n    name: string;\n    id: string;\n    fullGameCategories: Category[];\n    levelCategories: LevelCategory[];\n}\n\ninterface Category {\n    gameName: string;\n    gameId: string;\n    categoryName: string;\n    categoryId: string;\n    subcategories: Subcategory[];\n}\n\ninterface LevelCategory extends Category {\n    levelId: string;\n    levelName: string;\n}\n\ninterface Subcategory {\n    subcategoryKeyId: string;\n    subcategoryValueId: string;\n    subcategoryValueName: string;\n}\n\ninterface UserData {\n    id: string;\n    name: string;\n    games: Game[];\n}\n\nconst fetcher: Fetcher<{id: string},UserData> = async ({id}) => {\n    const loadVariables = async (variables: SRCVariableSet): Promise<Subcategory[]> => {\n        return await Promise.all(Object.entries(variables).map(async ([key, value]: [string, unknown]) => {\n            const variableData = await fetchWrapper<SRCResult<SRCVariable>>(`${SPEEDRUN_COM_URL}/variables/${key}`,{timeout:3000});\n            \n            return {\n                subcategoryKeyId: key,\n                subcategoryValueId: value as string,\n                subcategoryValueName: variableData.data.values.values[value as string].label\n            };\n        }));\n    };\n\n    const [userApiData, pbData] = await Promise.all([\n        fetchWrapper<SRCResult<SRCUser>>(`${SPEEDRUN_COM_URL}/users/${id}`,{timeout: 30000}),\n        fetchWrapper<SRCResult<SRCPB_gcl[]>>(`${SPEEDRUN_COM_URL}/users/${id}/personal-bests?embed=game,category,level`,{timeout: 30000})\n    ]);\n\n    const pbDataGrouped  = groupBy(pbData.data, pb => pb.category.data.type);\n\n    const pbDataFullGame = pbDataGrouped[\"per-game\"] ?? [];\n    const pbDataIL = pbDataGrouped[\"per-level\"] ?? [];\n    \n    const categoryDataFullGame: Category[] = (await Promise.all(pbDataFullGame.map(async pb => ({\n        gameName: pb.game.data.names.international,\n        gameId:  pb.game.data.id,\n        categoryName: pb.category.data.name,\n        categoryId: pb.category.data.id,\n\n        subcategories: await loadVariables(pb.run.values)\n    })))).sort((a: Category, b: Category) => {\n        if(a.categoryName < b.categoryName) return -1;\n        if(a.categoryName > b.categoryName) return 1;\n        if(a.subcategories.length == 0) return 0;\n        if(a.subcategories[0].subcategoryValueName < b.subcategories[0].subcategoryValueName) return -1;\n        if(a.subcategories[0].subcategoryValueName > b.subcategories[0].subcategoryValueName) return 1;\n        return 0;\n    });\n\n    const categoryDataILs: LevelCategory[] = (await Promise.all((pbDataIL.map(async pb => ({\n        gameName: pb.game.data.names.international,\n        gameId:  pb.game.data.id,\n        categoryName: pb.category.data.name,\n        categoryId: pb.category.data.id,\n        levelId: pb.level.data.id,\n        levelName: pb.level.data.name,\n\n        subcategories: await loadVariables(pb.run.values)        \n    }))))).sort((a: LevelCategory, b: LevelCategory) => {\n        if(a.levelName < b.levelName) return -1;\n        if(a.levelName > b.levelName) return 1;\n        if(a.categoryName < b.categoryName) return -1;\n        if(a.categoryName > b.categoryName) return 1;\n        if(a.subcategories.length == 0) return 0;\n        if(a.subcategories[0].subcategoryValueName < b.subcategories[0].subcategoryValueName) return -1;\n        if(a.subcategories[0].subcategoryValueName > b.subcategories[0].subcategoryValueName) return 1;\n\n        return 0;\n    });\n\n    const gameIds: string[] = [...new Set<string>(pbData.data.map(pb => pb.game.data.id))];\n\n    const games: Game[] = gameIds.map(id => {\n        const fullGameCategories = categoryDataFullGame.filter(category => category.gameId === id);\n        const levelCategories = categoryDataILs.filter(category => category.gameId === id);\n\n        return {\n            id,\n            name: fullGameCategories.length > 0 ? fullGameCategories[0].gameName : levelCategories[0].gameName,\n            fullGameCategories,\n            levelCategories,\n        };\n    });\n\n    return {\n        id: userApiData.data.id,\n        name: userApiData.data.names.international,\n        games: games\n    };\n};\n\nconst subcategoryLinkString = (subcategories: Subcategory[]): string => subcategories.length\n    ? \"?\" + subcategories.map((subcategory) => `${subcategory.subcategoryKeyId}=${subcategory.subcategoryValueId}`).join(\"&\")\n    : \"\";\n\nconst subcategoryTextString = (subcategories: Subcategory[]): string => subcategories.length\n    ? \" - \"+subcategories.map((subcategory) => subcategory.subcategoryValueName).join(\", \")\n    : \"\";\n\nconst UserPage: FC =  () => {\n    const {id} = useParams<{id: string}>();\n\n    const [data, loading, error] = useFetcher(fetcher,{id});\n\n    if(error) return <ErrorAlert error={error} />;\n    if(loading) return <LoadingAlert/>;\n\n    return (\n        <>\n            <h1>Categories for {data?.name}</h1>\n            {data && data?.games?.length > 0 ? data?.games.map((game: Game) => (\n                <React.Fragment key={game.id}>\n                    <h2> {game.name} </h2>\n                    {game.fullGameCategories.length > 0 ? <h3>Full game runs:</h3> : <></>}\n                    <ul>\n                        {game.fullGameCategories.map((category) => (\n                            <li key={JSON.stringify(category)}>\n                                <Link to={`/graph/${data.id}/${category.categoryId}${subcategoryLinkString(category.subcategories)}`}>\n                                    {category.categoryName}{subcategoryTextString(category.subcategories)}\n                                </Link>\n                            </li>                \n                        ))}         \n                    </ul>\n                    {game.levelCategories.length > 0 ? <h3>IL runs:</h3> : <></>}\n                    <ul>\n                        {game.levelCategories.map((category) => (\n                            <li key={JSON.stringify(category)}>\n                                <Link to={`/graph/il/${data.id}/${category.levelId}/${category.categoryId}?${subcategoryLinkString(category.subcategories)}`}>\n                                    {category.levelName} {category.categoryName}{subcategoryTextString(category.subcategories)}\n                                </Link>\n                            </li>     \n                        ))}\n                    </ul>\n                </React.Fragment>\n            )) : (<p>This user hasn&apos;t submitted any runs</p>)}\n        </>\n    );\n};\n\nexport default UserPage;","import React, { FC } from \"react\";\nimport { useLocation, useParams } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport { ErrorAlert, LoadingAlert } from \"../components/Alerts\";\nimport {SPEEDRUN_COM_URL} from \"../App\";\nimport { SRCPaginatedResult, SRCResult, SRCUser } from \"../types/SRCQueryResults\";\n\nimport useFetcher, {Fetcher} from \"../utils/useFetcher\";\nimport fetchWrapper from \"../utils/fetchWrapper\";\n\ninterface Result {\n    id: string;\n    name: string;\n}\n\ninterface Results {\n    exactMatch: Result | null;\n    results: Result[];\n    hasNext: boolean;\n}\n\nconst fetcher: Fetcher <{query: string; offset: number}, Results> = async ({query, offset}) => {\n    const [lookupData, searchData] = await Promise.all([\n        fetchWrapper<SRCResult<SRCUser[]>>(`${SPEEDRUN_COM_URL}/users?lookup=${query}`, {timeout: 30000}),\n        fetchWrapper<SRCPaginatedResult<SRCUser[]>>(`${SPEEDRUN_COM_URL}/users?name=${query}&offset=${offset}`, {timeout: 30000})\n    ]);\n\n    return {\n        exactMatch: lookupData.data.length > 0 ? {\n            id: lookupData.data[0].id,\n            name: lookupData.data[0].names.international\n        } : null,\n        results: searchData.data.map(user => ({id: user.id, name: user.names.international})),\n        hasNext: searchData.pagination.links.find(link => link.rel == \"next\") !== undefined\n    };\n};\n\n\nconst SearchPage: FC = () => {\n    const {query } = useParams<{query: string}>();\n    const searchParams = new URLSearchParams(useLocation().search);\n\n    const strOffset = searchParams.get(\"offset\");\n    const offset = strOffset ? parseInt(strOffset) : 0;\n\n    const [data, loading, error] = useFetcher(fetcher, {query, offset},[query,offset]);\n\n    if(error) return <ErrorAlert error={error} />;\n    if(loading) return <LoadingAlert/>;\n\n    return (\n        <>\n            <h3>Results for {query}:</h3>\n            <ul>\n                {data?.exactMatch && <p><b>An exact match was found: <Link to={`/user/${data.exactMatch.id}`}>{data.exactMatch.name} </Link></b></p> }\n                {data?.results && data.results.length > 0 ? data.results.map(({id, name}) => (\n                    <li key={id}><Link to={`/user/${id}`}>{name} </Link></li>\n                )) : (<p>No users found. <Link to=\"/\">Search again?</Link></p>)}\n            </ul>\n\n            {offset > 0 && (<Link to={`/search/${query}?offset=${Math.max(0, offset - 20)}`}>&lt;Prev</Link>)}\n            {offset > 0 && data?.hasNext && \" - \"}\n            {data?.hasNext && (<Link to={`/search/${query}?offset=${offset + 20}`}>Next &gt;</Link>)}\n        </>\n    );\n};\n\nexport default SearchPage;","import React, { FC } from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport GraphPage from \"./pages/GraphPage\";\nimport HomePage from \"./pages/HomePage\";\nimport UserPage from \"./pages/UserPage\";\nimport Container from \"react-bootstrap/Container\";\nimport { Nav, Navbar } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport SearchPage from \"./pages/SearchPage\";\nimport SearchComponent from \"./components/SearchComponent\";\nimport { Github } from \"react-bootstrap-icons\";\n\nexport const SPEEDRUN_COM_URL = \"https://speedrun.com/api/v1\";\n\nconst App : FC = ()  => {\n    return (\n        <Router>\n            <Navbar bg=\"dark\" expand=\"lg\" className=\"mb-4\" style={{justifyContent:\"space-between\", paddingLeft: \"1em\", paddingRight: \"1em\"}}>\n                <Nav>\n                    <Navbar.Brand href=\"#/\" style={{color: \"white\"}}>Speedrun PB Grapher</Navbar.Brand>\n                    <Nav.Link href=\"#/\" style={{color: \"white\"}}>Home</Nav.Link>\n                </Nav>\n                <Nav className=\"float-right\">\n                    <SearchComponent/>\n                    <Nav.Link href=\"https://github.com/Hurricane996/speedrun-pb-graph\"><Github style={{color: \"white\"}} className=\"ml-auto\"/></Nav.Link>\n                </Nav>\n            </Navbar>\n            <Container>\n                <Switch>\n                    <Route path=\"/user/:id\" exact>\n                        <UserPage />\n                    </Route>\n                    <Route path=\"/graph/il/:userId/:levelId/:categoryId\" exact>\n                        <GraphPage/>\n                    </Route>\n                    <Route path=\"/graph/:userId/:categoryId\" exact>\n                        <GraphPage/>\n                    </Route>\n                    <Route path=\"/search/:query\" exact>\n                        <SearchPage />\n                    </Route>\n                    <Route path=\"/\" exact>\n                        <HomePage/>\n                    </Route>\n                    <Route>404</Route>\n                </Switch>\n            </Container>\n        </Router>\n    );\n};\n\n\nexport default App;\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}