{"version":3,"sources":["Alerts.tsx","GraphPage.tsx","SearchComponent.tsx","HomePage.tsx","UserPage.tsx","SearchPage.tsx","App.tsx","index.tsx"],"names":["ErrorAlert","error","Alert","variant","LoadingAlert","makeHumanReadable","input","ms","s","Math","floor","m","h","msString","toFixed","slice","sString","mString","hString","GraphPage","useParams","userId","categoryId","theChart","useRef","useState","isLoading","setIsLoading","isError","setIsError","errorMessage","setErrorMessage","gameName","setGameName","categoryName","setCategoryName","username","setUsername","runs","setRuns","getData","a","Promise","all","fetchp","SPEEDRUN_COM_URL","dataRaw","map","raw","json","categoryData","userData","runsData","data","game","names","international","name","filter","run","status","date","DateTime","fromFormat","zone","time","times","primary_t","id","sort","first","second","message","console","useEffect","chartData","labels","datasets","label","borderColor","chartOptions","onClick","activeEl","current","getActiveElements","length","index","window","location","href","responsive","scales","x","type","tooltipFormat","y","ticks","callback","value","plugins","tooltip","callbacks","context","parsed","to","Jumbotron","ref","options","SearchComponent","search","setSearch","history","useHistory","Form","inline","onSubmit","e","preventDefault","push","InputGroup","Control","placeholder","onChange","target","Button","HomePage","UserPage","setUserData","getUserData","userApiData","pbData","categories","category","gameId","SearchPage","results","setResults","query","getInfo","timeout","raw_data","App","Navbar","bg","expand","className","style","justifyContent","Nav","Brand","color","Link","Container","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ec82491.chunk.js","sourcesContent":["import React, {FC} from \"react\";\nimport Alert from \"react-bootstrap/esm/Alert\";\n\ninterface ErrorProps {\n    error: string;\n}\nexport const ErrorAlert : FC<ErrorProps> = ({error} : ErrorProps) => (\n    <Alert variant=\"error\">An error occured: {error}</Alert>\n);\n\nexport const LoadingAlert: FC = () => (\n    <Alert variant=\"info\">Loading...</Alert>\n);","import fetchp from \"fetch-jsonp\";\nimport React, { FC, useEffect, useState, useRef } from \"react\";\nimport { useParams } from \"react-router\";\nimport { SPEEDRUN_COM_URL } from \"./App\";\nimport { Line} from \"react-chartjs-2\";\nimport \"chartjs-adapter-luxon\";\nimport { DateTime } from \"luxon\";\nimport { Link } from \"react-router-dom\";\nimport { Jumbotron } from \"react-bootstrap\";\nimport { ErrorAlert, LoadingAlert } from \"./Alerts\";\n\n\n\ninterface Run {\n    date: Date;\n    time: number;\n    id: string;\n}\n\nconst makeHumanReadable = (input: number): string => {\n    const ms = input % 1;\n    const s = Math.floor(input) % 60;\n    const m = Math.floor(input/60) % 60;\n    const h = Math.floor(input/3600);\n\n    const msString = ms === 0 ? \"\" : ms.toFixed(3).slice(1);\n\n    const sString = s < 10 ? `0${s}` : `${s}`;\n\n    const mString = m < 10 ? `0${m}` : `${m}`;\n    const hString = h === 0 ? \"\" : `${h}:`;\n\n    return `${hString}${mString}:${sString}${msString}`;\n};\n\n\n\nconst GraphPage: FC = () => \n{\n    const {userId, categoryId} = useParams<{userId?: string, categoryId?: string}>();\n    const theChart = useRef<typeof Line>(null);\n\n\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const [isError, setIsError] = useState<boolean>(false);\n    const [errorMessage, setErrorMessage] = useState<string>(\"\");\n\n    const [gameName, setGameName] = useState<string>(\"\");\n    const [categoryName, setCategoryName] = useState<string>(\"\");\n    const [username, setUsername] = useState<string>(\"\");\n\n    const [runs, setRuns] = useState<Run[]>([]);\n\n    const getData = async () => {\n        try {\n            const dataRaw = await Promise.all([\n                fetchp(`${SPEEDRUN_COM_URL}/categories/${categoryId}?embed=game&callback=callback`),\n                fetchp(`${SPEEDRUN_COM_URL}/users/${userId}?callback=callback`),\n                fetchp(`${SPEEDRUN_COM_URL}/runs?user=${userId}&category=${categoryId}&max=200&callback=callback`)\n            ]);\n            const [categoryData, userData, runsData] = await Promise.all(dataRaw.map((raw) => raw.json()));\n\n            setGameName(categoryData.data.game.data.names.international);\n            setCategoryName(categoryData.data.name);\n\n            setUsername(userData.data.names.international);\n\n            setIsLoading(false);\n\n            setRuns(runsData.data\n                .filter((run: any) => run.status.status !== \"rejected\")\n                .map((run: any) => ({\n                    date: DateTime.fromFormat(run.date, \"yyyy-MM-dd\", {zone: \"UTC\"}), \n                    time: run.times.primary_t,\n                    id: run.id\n                }))\n                .sort((first: Run, second: Run) => (\n                    first.date === second.date\n                        ? (first.time < second.time ? -1 : 1)\n                        : (first.date < second.date ? -1 : 1)               \n                ))\n            );\n        } catch (e) {\n            setIsError(true);\n            setErrorMessage(e.message);\n            console.error(e);\n        }\n    };\n\n    useEffect(() => {getData();}, []);\n    \n    if(isError) return <ErrorAlert error={errorMessage} />;\n    if(isLoading) return <LoadingAlert/>;\n\n    const chartData = {\n        labels: runs.map(run=>run.date),\n        datasets: [{\n            label: \"Time\",\n            data: runs.map(run=>run.time),\n            borderColor: \"rgb(255,0,0)\",\n        }]\n    };\n\n    const onChartClick = () => {\n        const activeEl = (theChart.current as any).getActiveElements();\n        if(activeEl.length > 0) {\n            const run = runs[activeEl[0].index];\n            window.location.href = `https://speedrun.com/run/${run.id}`;\n        }\n    };\n\n    const chartOptions = {\n        onClick: onChartClick,\n        responsive: true,\n        scales: {\n            x: {\n                type: \"time\",\n                time: {\n                    tooltipFormat: \"MMM d, yyyy\"\n                }\n            },\n            y: {\n                ticks: {\n                    callback: (value: number) => makeHumanReadable(value)\n                }\n            }\n        },\n        plugins: {\n            tooltip: {\n                callbacks: {\n                    label: (context: any) => makeHumanReadable(context.parsed.y)\n                }\n            }\n        }\n    };\n\n    return (\n        <>\n            <h1>{gameName} : {categoryName} - {username}</h1>\n            <Link to={`/user/${userId}`} >Back to user</Link>\n            <p><b> Click a data-point to see the associated run&apos;s speedrun.com page!</b></p>\n            <Jumbotron>\n                <Line ref={theChart} type='line' data={chartData} options={chartOptions} />\n            </Jumbotron>\n        </>\n    );\n};\nexport default GraphPage;","import React, { useState, ChangeEvent, FormEvent, FC } from \"react\";\nimport { Search } from \"react-bootstrap-icons\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport { useHistory } from \"react-router\";\n\n\nconst SearchComponent: FC = () => {\n    const [search, setSearch] = useState<string>(\"\");\n    const history = useHistory();\n\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        setSearch(e.target.value);\n    };\n\n    const submit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        history.push(`/search/${search}`);\n    };\n    return (    \n        <Form inline onSubmit={submit}>\n            <InputGroup>\n                <Form.Control type=\"search\"  name=\"username\" id=\"searchInput\" placeholder=\"speedrun.com username\" value={search} onChange={handleChange}/>\n                <Button type=\"submit\"><Search/></Button>\n            </InputGroup>\n        </Form>\n    );\n};\n\nexport default SearchComponent;","import React, {  FC  } from \"react\";\n\nimport SearchComponent from \"./SearchComponent\";\n\nconst HomePage: FC = () => {\n\n\n    return (\n        <>\n            <h1> Welcome to the Speedrun PB Grapher</h1>\n            <h3> Enter your username to get started!</h3>\n            <SearchComponent />\n        </>\n    );\n};\n\nexport default HomePage;","import fetchp from \"fetch-jsonp\";\nimport React, { FC, useEffect, useState } from \"react\";\nimport {Link, useParams} from \"react-router-dom\";\nimport { ErrorAlert, LoadingAlert } from \"./Alerts\";\nimport { SPEEDRUN_COM_URL } from \"./App\";\n\ninterface Category {\n    gameName: string;\n    gameId: string;\n    categoryName: string;\n    categoryId: string;\n}\n\ninterface UserData {\n    id: string;\n    name: string;\n    categories: Category[]\n}\n\nconst UserPage: FC =  () => {\n    const {id} = useParams<{id?: string}>();\n\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const [isError, setIsError] = useState<boolean>(false);\n    const [errorMessage, setErrorMessage] = useState<string>(\"\");\n\n    const [userData, setUserData] = useState<UserData | null>(null);\n\n    const getUserData = async () => {\n        try {\n\n            const dataRaw = await Promise.all([\n                fetchp(`${SPEEDRUN_COM_URL}/users/${id}?callback=callback`),\n                fetchp(`${SPEEDRUN_COM_URL}/users/${id}/personal-bests?embed=game,category&callback=callback`)\n            ]);\n\n            const [userApiData, pbData] = await Promise.all(dataRaw.map((raw) => raw.json()));\n\n            setIsLoading(false);\n\n            setUserData({\n                id: userApiData.data.id,\n                name: userApiData.data.names.international,\n                categories: pbData.data\n                    .filter(({category} : any) => category.data.type === \"per-game\")\n                    .map(({game, category}: any) => ({\n                        gameName: game.data.names.international,\n                        gameId: game.data.id,\n                        categoryName: category.data.name,\n                        categoryId: category.data.id\n                    }))\n            });\n        } catch (error) {\n            setIsError(true);\n            setErrorMessage(error.message);\n            console.error(error);\n        }\n    };\n\n    useEffect(()=>{getUserData();},[]);\n\n    if(isError) return <ErrorAlert error={errorMessage} />;\n    if(isLoading) return <LoadingAlert/>;\n    \n    return (<>\n        <h2>Categories for {userData?.name}</h2>\n        <ul>\n            {userData?.categories.map((category: Category) => (\n                <li key={category.categoryId}><Link to={`/graph/${userData?.id}/${category.categoryId}`}>{category.gameName}: {category.categoryName}</Link></li>\n            ))}\n        </ul>\n    </>);\n\n};\n\nexport default UserPage;","import fetchp from \"fetch-jsonp\";\nimport React, { useEffect, useState, FC } from \"react\";\nimport { useParams } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport { ErrorAlert, LoadingAlert } from \"./Alerts\";\n\nimport {SPEEDRUN_COM_URL} from \"./App\";\n\n\ninterface Result {\n    id: string;\n    name: string;\n}\n\nconst SearchPage: FC = () => {\n    const [results, setResults] = useState<Result[]>([]);\n    const {query} = useParams<{query: string}>();\n\n    const [isError, setIsError] = useState<boolean>(false);\n    const [errorMessage, setErrorMessage] = useState<string>(\"\");\n\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n\n\n    const getInfo = async () => {\n        try {\n\n            const raw_data = await fetchp(`${SPEEDRUN_COM_URL}/users?name=${query}`, {timeout: 20000});\n            const data = await raw_data.json();\n\n            setResults(data.data.map(\n                ({id, names}: any) => ({\n                    id, \n                    name: names.international\n                })\n            ));\n\n            setIsLoading(false);\n\n        } catch(error)  {\n            console.error(error);\n            setIsError(true);\n            setErrorMessage(`Error ${errorMessage} occurred`);\n        }\n    };\n\n    useEffect(() => {getInfo();} , []);\n\n    if(isError) return <ErrorAlert error={errorMessage} />;\n    if(isLoading) return <LoadingAlert/>;\n\n    return (\n        <>\n            <h3>Results for {query}:</h3>\n            <ul>\n                {results.length > 0 ? results.map(({id, name}) => (\n                    <li key={id}><Link to={`/user/${id}`}>{name} </Link></li>\n                )) : (<p>No users found. <Link to=\"/\">Search again?</Link></p>)}\n            </ul>\n        </>\n    );\n\n};\n\nexport default SearchPage;","import React, { FC } from \"react\";\n\nimport { HashRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport GraphPage from \"./GraphPage\";\n\nimport HomePage from \"./HomePage\";\nimport UserPage from \"./UserPage\";\n\nimport Container from \"react-bootstrap/Container\";\nimport { Nav, Navbar } from \"react-bootstrap\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport SearchPage from \"./SearchPage\";\nimport SearchComponent from \"./SearchComponent\";\nimport NavbarCollapse from \"react-bootstrap/esm/NavbarCollapse\";\nimport { Github } from \"react-bootstrap-icons\";\n\n\nexport const SPEEDRUN_COM_URL = \"https://speedrun.com/api/v1\";\n\n\nconst App : FC = ()  => {\n    return (\n        <Router>\n            <Navbar bg=\"dark\" expand=\"lg\" className=\"mb-4\" style={{justifyContent:\"space-between\"}}>\n                <Nav>\n                    <Navbar.Brand href=\"#/\" style={{color: \"white\"}}>Speedrun PB Grapher</Navbar.Brand>\n                    <Nav.Link href=\"#/\" style={{color: \"white\"}}>Home</Nav.Link>\n                </Nav>\n                \n                <Nav className=\"float-right\">\n                    <SearchComponent/>\n                    <Nav.Link href=\"https://github.com/Hurricane996/speedrun-pb-graph\"><Github style={{color: \"white\"}} className=\"ml-auto\"/></Nav.Link>\n                </Nav>\n            </Navbar>\n            <Container>\n                <Switch>\n                    <Route path=\"/user/:id\" exact>\n                        <UserPage />\n                    </Route>\n                    <Route path=\"/graph/:userId/:categoryId\" exact>\n                        <GraphPage />\n                    </Route>\n                    <Route path=\"/search/:query\" exact>\n                        <SearchPage />\n                    </Route>\n                    <Route path=\"/\" exact>\n                        <HomePage/>\n                    </Route>\n                    <Route>404</Route>\n                </Switch>\n            </Container>\n        </Router>\n    );\n};\n\n\nexport default App;\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}