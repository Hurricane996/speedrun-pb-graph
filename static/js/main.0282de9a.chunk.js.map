{"version":3,"sources":["Alerts.tsx","GraphPage.tsx","SearchComponent.tsx","HomePage.tsx","UserPage.tsx","SearchPage.tsx","App.tsx","index.tsx"],"names":["ErrorAlert","error","Alert","variant","LoadingAlert","makeHumanReadable","input","ms","s","Math","floor","m","h","msString","toFixed","slice","sString","mString","hString","GraphPage","useParams","userId","categoryId","theChart","useRef","search","URLSearchParams","useLocation","useState","isLoading","setIsLoading","isError","setIsError","errorMessage","setErrorMessage","gameName","setGameName","categoryName","setCategoryName","username","setUsername","subcategoryString","setSubcategoryString","runs","setRuns","getData","a","Promise","all","fetchp","SPEEDRUN_COM_URL","timeout","dataRaw","map","raw","json","categoryData","userData","runsData","entries","key","value","data","values","label","join","game","names","international","name","filter","run","status","Object","every","runKey","get","date","DateTime","fromFormat","zone","time","times","primary_t","id","sort","first","second","message","console","useEffect","chartData","labels","datasets","borderColor","chartOptions","onClick","activeEl","current","getActiveElements","length","index","window","location","href","responsive","scales","x","type","tooltipFormat","y","ticks","callback","plugins","tooltip","callbacks","context","parsed","to","Jumbotron","ref","options","SearchComponent","setSearch","history","useHistory","Form","inline","onSubmit","e","preventDefault","push","InputGroup","Control","placeholder","onChange","target","Button","HomePage","CategoryLink","category","subcategoryLinkString","subcategories","subcategory","subcategoryKeyId","subcategoryValueId","subcategoryTextString","subcategoryValueName","GameLinkSet","categories","UserPage","setUserData","getUserData","userApiData","pbData","pb","gameId","variableDataRaw","variableData","games","forEach","added","b","localeCompare","SearchPage","results","setResults","query","getInfo","raw_data","App","Navbar","bg","expand","className","style","justifyContent","Nav","Brand","color","Link","Container","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAMaA,EAA8B,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAF,OACvC,eAACC,EAAA,EAAD,CAAOC,QAAQ,SAAf,+BAA2CF,MAGlCG,EAAmB,kBAC5B,cAACF,EAAA,EAAD,CAAOC,QAAQ,OAAf,yBCMEE,EAAoB,SAACC,GACvB,IAAMC,EAAKD,EAAQ,EACbE,EAAIC,KAAKC,MAAMJ,GAAS,GACxBK,EAAIF,KAAKC,MAAMJ,EAAM,IAAM,GAC3BM,EAAIH,KAAKC,MAAMJ,EAAM,MAErBO,EAAkB,IAAPN,EAAW,GAAKA,EAAGO,QAAQ,GAAGC,MAAM,GAE/CC,EAAUR,EAAI,GAAJ,WAAaA,GAAb,UAAsBA,GAEhCS,EAAUN,EAAI,GAAJ,WAAaA,GAAb,UAAsBA,GAChCO,EAAgB,IAANN,EAAU,GAAV,UAAkBA,EAAlB,KAEhB,MAAM,GAAN,OAAUM,GAAV,OAAoBD,EAApB,YAA+BD,GAA/B,OAAyCH,IAsI9BM,EAjIO,WACrB,IAAD,EACiCC,cAAtBC,EADX,EACWA,OAAQC,EADnB,EACmBA,WACTC,EAAWC,iBAAoB,MAE/BC,EAAS,IAAIC,gBAAgBC,cAAcF,QAJrD,EAOsCG,oBAAkB,GAPxD,mBAOWC,EAPX,KAOsBC,EAPtB,OAQkCF,oBAAkB,GARpD,mBAQWG,EARX,KAQoBC,EARpB,OAS4CJ,mBAAiB,IAT7D,mBASWK,EATX,KASyBC,EATzB,OAWoCN,mBAAiB,IAXrD,mBAWWO,EAXX,KAWqBC,EAXrB,OAY4CR,mBAAiB,IAZ7D,mBAYWS,EAZX,KAYyBC,EAZzB,OAaoCV,mBAAiB,IAbrD,mBAaWW,EAbX,KAaqBC,EAbrB,OAcsDZ,mBAAiB,IAdvE,mBAcWa,EAdX,KAc8BC,EAd9B,OAgB4Bd,mBAAgB,IAhB5C,mBAgBWe,EAhBX,KAgBiBC,EAhBjB,KAmBUC,EAAO,uCAAG,wCAAAC,EAAA,+EAGcC,QAAQC,IAAI,CAC9BC,IAAO,GAAD,OAAIC,EAAJ,uBAAmC5B,EAAnC,eAA2D,CAAC6B,QAAS,MAC3EF,IAAO,GAAD,OAAIC,EAAJ,kBAA8B7B,GAAS,CAAC8B,QAAS,MACvDF,IAAO,GAAD,OAAIC,EAAJ,sBAAkC7B,EAAlC,qBAAqDC,EAArD,YAA0E,CAAC6B,QAAS,QANtF,cAGFC,EAHE,gBAQyCL,QAAQC,IAAII,EAAQC,KAAI,SAACC,GAAD,OAASA,EAAIC,WAR9E,0CAQDC,EARC,KAQaC,EARb,KAQuBC,EARvB,eAWyBX,QAAQC,IAAI,YAAIvB,EAAOkC,WAAWN,IAAtB,uCAA0B,qCAAAP,EAAA,gFAAQc,EAAR,KAAYC,EAAZ,cAC7CZ,IAAO,GAAD,OAAIC,EAAJ,sBAAkCU,IADK,cAC7DR,EAD6D,gBAEhDA,EAAQG,OAFwC,cAE7DO,EAF6D,yBAG5DA,EAAKA,KAAKC,OAAOA,OAAOF,GAAiBG,OAHmB,2CAA1B,wDAXrC,QAWFvB,EAXE,OAeHwB,KAAK,MAGV7B,EAAYoB,EAAaM,KAAKI,KAAKJ,KAAKK,MAAMC,eAC9C9B,EAAgBkB,EAAaM,KAAKO,MAElC3B,EAAqBD,GAErBD,EAAYiB,EAASK,KAAKK,MAAMC,eAEhCtC,GAAa,GAEbc,EAAQc,EAASI,KAEZQ,QAAO,SAACC,GAAD,MAAoC,aAAtBA,EAAIC,OAAOA,UAEhCF,QAAO,SAACC,GAAD,OAAcE,OAAOd,QAAQY,EAAIR,QAAQW,OAAM,mCAAEC,EAAF,mBAA8DlD,EAAOmD,IAAID,SAC/HtB,KAAI,SAACkB,GAAD,MAAe,CAChBM,KAAMC,WAASC,WAAWR,EAAIM,KAAM,aAAc,CAACG,KAAM,QACzDC,KAAMV,EAAIW,MAAMC,UAChBC,GAAIb,EAAIa,OAGXC,MAAK,SAACC,EAAYC,GAAb,OACFD,EAAMT,OAASU,EAAOV,KACfS,EAAML,KAAOM,EAAON,MAAQ,EAAI,EAChCK,EAAMT,KAAOU,EAAOV,MAAQ,EAAI,MAzCvC,kDA6CR7C,GAAW,GACXE,EAAgB,KAAEsD,SAClBC,QAAQxF,MAAR,MA/CQ,0DAAH,qDAqDb,GAFAyF,qBAAU,WAAO7C,MAAa,IAE3Bd,EAAS,OAAO,cAAC,EAAD,CAAY9B,MAAOgC,IACtC,GAAGJ,EAAW,OAAO,cAAC,EAAD,IAErB,IAAM8D,GAAY,CACdC,OAAQjD,EAAKU,KAAI,SAAAkB,GAAG,OAAEA,EAAIM,QAC1BgB,SAAU,CAAC,CACP7B,MAAO,OACPF,KAAMnB,EAAKU,KAAI,SAAAkB,GAAG,OAAEA,EAAIU,QACxBa,YAAa,kBAYfC,GAAe,CACjBC,QATiB,WACjB,IAAMC,EAAY1E,EAAS2E,QAAgBC,oBAC3C,GAAGF,EAASG,OAAS,EAAG,CACpB,IAAM7B,EAAM5B,EAAKsD,EAAS,GAAGI,OAC7BC,OAAOC,SAASC,KAAhB,mCAAmDjC,EAAIa,MAM3DqB,YAAY,EACZC,OAAQ,CACJC,EAAG,CACCC,KAAM,OACN3B,KAAM,CACF4B,cAAe,gBAGvBC,EAAG,CACCC,MAAO,CACHC,SAAU,SAACnD,GAAD,OAAmBxD,EAAkBwD,OAI3DoD,QAAS,CACLC,QAAS,CACLC,UAAW,CACPnD,MAAO,SAACoD,GAAD,OAAkB/G,EAAkB+G,EAAQC,OAAOP,QAM1E,OACI,qCACI,+BAAK3E,EAAL,MAAkBE,EAAlB,MAAmCI,EAAmBA,EAAkB,MAAQ,GAAIF,KACpF,cAAC,IAAD,CAAM+E,GAAE,gBAAWjG,GAAnB,0BACA,4BAAG,qGACH,cAACkG,EAAA,EAAD,UACI,cAAC,IAAD,CAAMC,IAAKjG,EAAUqF,KAAK,OAAO9C,KAAM6B,GAAW8B,QAAS1B,W,mCCjI5D2B,EAvBa,WAAO,IAAD,EACF9F,mBAAiB,IADf,mBACvBH,EADuB,KACfkG,EADe,KAExBC,EAAUC,cAWhB,OACI,cAACC,EAAA,EAAD,CAAMC,QAAM,EAACC,SALF,SAACC,GACZA,EAAEC,iBACFN,EAAQO,KAAR,kBAAwB1G,KAGxB,SACI,eAAC2G,EAAA,EAAD,WACI,cAACN,EAAA,EAAKO,QAAN,CAAczB,KAAK,SAAUvC,KAAK,WAAWe,GAAG,cAAckD,YAAY,wBAAwBzE,MAAOpC,EAAQ8G,SAZxG,SAACN,GAClBA,EAAEC,iBACFP,EAAUM,EAAEO,OAAO3E,UAWX,cAAC4E,EAAA,EAAD,CAAQ7B,KAAK,SAAb,SAAsB,cAAC,IAAD,YCRvB8B,EAZM,WAGjB,OACI,qCACI,qEACA,sEACA,cAAC,EAAD,Q,QC4BNC,EAAsC,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,SAAUnF,EAAiC,EAAjCA,SAC9CoF,EAAwBD,EAASE,cAAczF,KAAI,SAAC0F,GAAD,gBAClDA,EAAYC,iBADsC,YAClBD,EAAYE,uBACjDhF,KAAK,KAEDiF,EAAwBN,EAASE,cAClCzF,KAAI,SAAC0F,GAAD,OAAiBA,EAAYI,wBACjClF,KAAK,MAEV,OACI,6BACI,eAAC,IAAD,CAAMqD,GAAE,wBAAY7D,QAAZ,IAAYA,OAAZ,EAAYA,EAAU2B,GAAtB,YAA4BwD,EAAStH,WAArC,YAAmDuH,GAA3D,UACKD,EAASvG,aADd,IAC6BuG,EAASE,cAAc1C,OAAS,EAAhC,YAAyC8C,GAA0B,OAF3FN,EAAStH,aAYpB8H,EAAoC,SAAC,GAAwC,IAAvClF,EAAsC,EAAtCA,KAAMT,EAAgC,EAAhCA,SAC9C,OACI,qCACI,mCAAMS,EAAKG,KAAX,OACCH,EAAKmF,WAAWhG,KAAI,SAAAuF,GAAQ,OAAK,cAAC,EAAD,CAAwCA,SAAUA,EAAUnF,SAAUA,GAAnDmF,EAAStH,mBA0G3DgI,EArGO,WAAO,IAClBlE,EAAMhE,cAANgE,GADiB,EAGUxD,oBAAkB,GAH5B,mBAGjBC,EAHiB,KAGNC,EAHM,OAIMF,oBAAkB,GAJxB,mBAIjBG,EAJiB,KAIRC,EAJQ,OAKgBJ,mBAAiB,IALjC,mBAKjBK,EALiB,KAKHC,EALG,OAOQN,mBAA0B,MAPlC,mBAOjB6B,EAPiB,KAOP8F,EAPO,KASlBC,EAAW,uCAAG,wCAAA1G,EAAA,+EAGUC,QAAQC,IAAI,CAC9BC,IAAO,GAAD,OAAIC,EAAJ,kBAA8BkC,GAAK,CAACjC,QAAS,MACnDF,IAAO,GAAD,OAAIC,EAAJ,kBAA8BkC,EAA9B,uCAAsE,CAACjC,QAAS,QAL9E,cAGNC,EAHM,gBAQwBL,QAAQC,IAAII,EAAQC,KAAI,SAACC,GAAD,OAASA,EAAIC,WAR7D,0CAQLkG,EARK,KAQQC,EARR,eAU2B3G,QAAQC,IAAI0G,EAAO5F,KAAKT,IAAZ,uCAAgB,WAAOsG,GAAP,eAAA7G,EAAA,yDAClC,cAA1B6G,EAAGf,SAAS9E,KAAK8C,KAD2C,yCAGpD,MAHoD,cAKzDgC,EAAqB,CACvBzG,SAAUwH,EAAGzF,KAAKJ,KAAKK,MAAMC,cAC7BwF,OAASD,EAAGzF,KAAKJ,KAAKsB,GACtB/C,aAAcsH,EAAGf,SAAS9E,KAAKO,KAC/B/C,WAAYqI,EAAGf,SAAS9E,KAAKsB,GAE7B0D,cAAe,IAX4C,SAczD/F,QAAQC,IAAIyB,OAAOd,QAAQgG,EAAGpF,IAAIR,QAAQV,IAA9B,iBAAAoB,OAAA,IAAAA,CAAA,UAAkC,qCAAA3B,EAAA,gFAAQc,EAAR,KAAaC,EAAb,cAClBZ,IAAO,GAAD,OAAIC,EAAJ,sBAAkCU,IADtB,cAC1CiG,EAD0C,gBAErBA,EAAgBtG,OAFK,OAE1CuG,EAF0C,OAIhDlB,EAASE,cAAcX,KAAK,CACxBa,iBAAkBpF,EAClBqF,mBAAoBpF,EACpBsF,qBAAsBW,EAAahG,KAAKC,OAAOA,OAAOF,GAAiBG,QAP3B,2CAAlC,wDAd6C,gCAyBxD4E,GAzBwD,2CAAhB,wDAVvC,QAUNpF,EAVM,OAsCNuG,EAAgB,GAEtBvG,EAAawG,SAAQ,SAAApB,GACjB,GAAc,OAAXA,EAAH,CACA,IAAIqB,GAAQ,EACZF,EAAMC,SAAQ,SAAA9F,GACPA,EAAKkB,KAAOwD,EAASgB,SACpB1F,EAAKmF,WAAWlB,KAAKS,GACrBqB,GAAQ,MAIZA,GAAOF,EAAM5B,KAAK,CAClB/C,GAAIwD,EAASgB,OACbvF,KAAMuE,EAASzG,SACfkH,WAAY,CAACT,SAIrBmB,EAAM1G,KAAI,SAAAa,GAAI,kCACPA,GADO,IAEVmF,WAAYnF,EAAKmF,WAAWhE,MAAK,SAACvC,EAAEoH,GAAH,OAASpH,EAAET,aAAa8H,cAAcD,EAAE7H,sBAG7EP,GAAa,GAEbyH,EAAY,CACRnE,GAAIqE,EAAY3F,KAAKsB,GACrBf,KAAMoF,EAAY3F,KAAKK,MAAMC,cAC7B2F,MAAOA,IAnEC,kDAsEZ/H,GAAW,GACXE,EAAgB,KAAMsD,SACtBC,QAAQxF,MAAR,MAxEY,0DAAH,qDA8EjB,OAFAyF,qBAAU,WAAK8D,MAAgB,IAE5BzH,EAAgB,cAAC,EAAD,CAAY9B,MAAOgC,IACnCJ,EAAkB,cAAC,EAAD,IAIb,qCACJ,wDAAoB4B,QAApB,IAAoBA,OAApB,EAAoBA,EAAUY,QAD1B,OAEHZ,QAFG,IAEHA,OAFG,EAEHA,EAAUsG,MAAM1G,KAAI,SAACa,GAAD,OACjB,cAAC,EAAD,CAAaA,KAAMA,EAAMT,SAAUA,GAAeS,EAAKkB,W,2BCrGpDgF,G,OAlDQ,WAAO,IAAD,EACKxI,mBAAmB,IADxB,mBAClByI,EADkB,KACTC,EADS,KAElBC,EAASnJ,cAATmJ,MAFkB,EAIK3I,oBAAkB,GAJvB,mBAIlBG,EAJkB,KAITC,EAJS,OAKeJ,mBAAiB,IALhC,mBAKlBK,EALkB,KAKJC,EALI,OAOSN,oBAAkB,GAP3B,mBAOlBC,EAPkB,KAOPC,EAPO,KAUnB0I,EAAO,uCAAG,8BAAA1H,EAAA,+EAGeG,IAAO,GAAD,OAAIC,EAAJ,uBAAmCqH,GAAS,CAACpH,QAAS,MAH3E,cAGFsH,EAHE,gBAIWA,EAASlH,OAJpB,OAIFO,EAJE,OAMRwG,EAAWxG,EAAKA,KAAKT,KACjB,kBAAuB,CACnB+B,GADJ,EAAEA,GAEEf,KAFJ,EAAMF,MAEUC,mBAIpBtC,GAAa,GAbL,kDAgBR2D,QAAQxF,MAAR,MACA+B,GAAW,GACXE,EAAgB,SAAD,OAAUD,EAAV,cAlBP,0DAAH,qDAwBb,OAFAyD,qBAAU,WAAO8E,MAAc,CAACD,IAE7BxI,EAAgB,cAAC,EAAD,CAAY9B,MAAOgC,IACnCJ,EAAkB,cAAC,EAAD,IAGjB,qCACI,8CAAiB0I,EAAjB,OACA,6BACKF,EAAQjE,OAAS,EAAIiE,EAAQhH,KAAI,gBAAE+B,EAAF,EAAEA,GAAIf,EAAN,EAAMA,KAAN,OAC9B,6BAAa,eAAC,IAAD,CAAMiD,GAAE,gBAAWlC,GAAnB,UAA0Bf,EAA1B,QAAJe,MACP,iDAAmB,cAAC,IAAD,CAAMkC,GAAG,IAAT,qC,SCvC5BpE,EAAmB,8BAsCjBwH,EAnCE,WACb,OACI,eAAC,IAAD,WACI,eAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,OAAO,KAAKC,UAAU,OAAOC,MAAO,CAACC,eAAe,iBAAtE,UACI,eAACC,EAAA,EAAD,WACI,cAACN,EAAA,EAAOO,MAAR,CAAc1E,KAAK,KAAKuE,MAAO,CAACI,MAAO,SAAvC,iCACA,cAACF,EAAA,EAAIG,KAAL,CAAU5E,KAAK,KAAKuE,MAAO,CAACI,MAAO,SAAnC,qBAEJ,eAACF,EAAA,EAAD,CAAKH,UAAU,cAAf,UACI,cAAC,EAAD,IACA,cAACG,EAAA,EAAIG,KAAL,CAAU5E,KAAK,oDAAf,SAAmE,cAAC,IAAD,CAAQuE,MAAO,CAACI,MAAO,SAAUL,UAAU,oBAGtH,cAACO,EAAA,EAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAK,YAAYC,OAAK,EAA7B,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOD,KAAK,6BAA6BC,OAAK,EAA9C,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOD,KAAK,iBAAiBC,OAAK,EAAlC,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOD,KAAK,IAAIC,OAAK,EAArB,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,2BC5CpBC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.0282de9a.chunk.js","sourcesContent":["import React, {FC} from \"react\";\nimport Alert from \"react-bootstrap/esm/Alert\";\n\ninterface ErrorProps {\n    error: string;\n}\nexport const ErrorAlert : FC<ErrorProps> = ({error} : ErrorProps) => (\n    <Alert variant=\"danger\">An error occured: {error}</Alert>\n);\n\nexport const LoadingAlert: FC = () => (\n    <Alert variant=\"info\">Loading...</Alert>\n);","import fetchp from \"fetch-jsonp\";\nimport React, { FC, useEffect, useState, useRef } from \"react\";\nimport { useLocation, useParams } from \"react-router\";\nimport { SPEEDRUN_COM_URL } from \"./App\";\nimport { Line} from \"react-chartjs-2\";\nimport \"chartjs-adapter-luxon\";\nimport { DateTime } from \"luxon\";\nimport { Link } from \"react-router-dom\";\nimport { Jumbotron } from \"react-bootstrap\";\nimport { ErrorAlert, LoadingAlert } from \"./Alerts\";\n\ninterface Run {\n    date: Date;\n    time: number;\n    id: string;\n}\n\nconst makeHumanReadable = (input: number): string => {\n    const ms = input % 1;\n    const s = Math.floor(input) % 60;\n    const m = Math.floor(input/60) % 60;\n    const h = Math.floor(input/3600);\n\n    const msString = ms === 0 ? \"\" : ms.toFixed(3).slice(1);\n\n    const sString = s < 10 ? `0${s}` : `${s}`;\n\n    const mString = m < 10 ? `0${m}` : `${m}`;\n    const hString = h === 0 ? \"\" : `${h}:`;\n\n    return `${hString}${mString}:${sString}${msString}`;\n};\n\n\n\nconst GraphPage: FC = () => \n{\n    const {userId, categoryId} = useParams<{userId?: string, categoryId?: string}>();\n    const theChart = useRef<typeof Line>(null);\n\n    const search = new URLSearchParams(useLocation().search);\n\n\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const [isError, setIsError] = useState<boolean>(false);\n    const [errorMessage, setErrorMessage] = useState<string>(\"\");\n\n    const [gameName, setGameName] = useState<string>(\"\");\n    const [categoryName, setCategoryName] = useState<string>(\"\");\n    const [username, setUsername] = useState<string>(\"\");\n    const [subcategoryString, setSubcategoryString] = useState<string>(\"\");\n\n    const [runs, setRuns] = useState<Run[]>([]);\n\n\n    const getData = async () => {\n\n        try {\n            const dataRaw = await Promise.all([\n                fetchp(`${SPEEDRUN_COM_URL}/categories/${categoryId}?embed=game`,{timeout: 30000}),\n                fetchp(`${SPEEDRUN_COM_URL}/users/${userId}`,{timeout: 30000}),\n                fetchp(`${SPEEDRUN_COM_URL}/runs?user=${userId}&category=${categoryId}&max=200`,{timeout: 30000})\n            ]);\n            const [categoryData, userData, runsData] = await Promise.all(dataRaw.map((raw) => raw.json()));\n\n            \n            const subcategoryString = (await Promise.all([...search.entries()].map(async ([key,value]: [string,any]) : Promise<string> => {\n                const dataRaw = await fetchp(`${SPEEDRUN_COM_URL}/variables/${key}`);\n                const data = await dataRaw.json();\n                return data.data.values.values[value as string].label;\n            }))).join(\", \");\n\n\n            setGameName(categoryData.data.game.data.names.international);\n            setCategoryName(categoryData.data.name);\n\n            setSubcategoryString(subcategoryString);\n\n            setUsername(userData.data.names.international);\n\n            setIsLoading(false);\n\n            setRuns(runsData.data\n                // filter out rejected runs\n                .filter((run: any) => run.status.status !== \"rejected\")\n                // only accept runs of the suggested subcategory\n                .filter((run: any) => Object.entries(run.values).every(([runKey, runValue] :[string, any]) => runValue as string === search.get(runKey)))\n                .map((run: any) => ({\n                    date: DateTime.fromFormat(run.date, \"yyyy-MM-dd\", {zone: \"UTC\"}), \n                    time: run.times.primary_t,\n                    id: run.id\n                }))\n                // sort the runs, otherwise it will play connect the dots\n                .sort((first: Run, second: Run) => (\n                    first.date === second.date\n                        ? (first.time < second.time ? -1 : 1)\n                        : (first.date < second.date ? -1 : 1)               \n                ))\n            );\n        } catch (e) {\n            setIsError(true);\n            setErrorMessage(e.message);\n            console.error(e);\n        }\n    };\n\n    useEffect(() => {getData();}, []);\n    \n    if(isError) return <ErrorAlert error={errorMessage} />;\n    if(isLoading) return <LoadingAlert/>;\n\n    const chartData = {\n        labels: runs.map(run=>run.date),\n        datasets: [{\n            label: \"Time\",\n            data: runs.map(run=>run.time),\n            borderColor: \"rgb(255,0,0)\",\n        }]\n    };\n\n    const onChartClick = () => {\n        const activeEl = (theChart.current as any).getActiveElements();\n        if(activeEl.length > 0) {\n            const run = runs[activeEl[0].index];\n            window.location.href = `https://speedrun.com/run/${run.id}`;\n        }\n    };\n\n    const chartOptions = {\n        onClick: onChartClick,\n        responsive: true,\n        scales: {\n            x: {\n                type: \"time\",\n                time: {\n                    tooltipFormat: \"MMM d, yyyy\"\n                }\n            },\n            y: {\n                ticks: {\n                    callback: (value: number) => makeHumanReadable(value)\n                }\n            }\n        },\n        plugins: {\n            tooltip: {\n                callbacks: {\n                    label: (context: any) => makeHumanReadable(context.parsed.y)\n                }\n            }\n        }\n    };\n\n    return (\n        <>\n            <h1>{gameName} : {categoryName} - {subcategoryString? subcategoryString+\" - \" : \"\"}{username}</h1>\n            <Link to={`/user/${userId}`} >Back to user</Link>\n            <p><b> Click a data-point to see the associated run&apos;s speedrun.com page!</b></p>\n            <Jumbotron>\n                <Line ref={theChart} type='line' data={chartData} options={chartOptions} />\n            </Jumbotron>\n        </>\n    );\n};\nexport default GraphPage;","import React, { useState, ChangeEvent, FormEvent, FC } from \"react\";\nimport { Search } from \"react-bootstrap-icons\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport { useHistory } from \"react-router\";\n\nconst SearchComponent: FC = () => {\n    const [search, setSearch] = useState<string>(\"\");\n    const history = useHistory();\n\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        setSearch(e.target.value);\n    };\n\n    const submit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        history.push(`/search/${search}`);\n    };\n    return (    \n        <Form inline onSubmit={submit}>\n            <InputGroup>\n                <Form.Control type=\"search\"  name=\"username\" id=\"searchInput\" placeholder=\"speedrun.com username\" value={search} onChange={handleChange}/>\n                <Button type=\"submit\"><Search/></Button>\n            </InputGroup>\n        </Form>\n    );\n};\n\nexport default SearchComponent;","import React, {  FC  } from \"react\";\n\nimport SearchComponent from \"./SearchComponent\";\n\nconst HomePage: FC = () => {\n\n\n    return (\n        <>\n            <h1> Welcome to the Speedrun PB Grapher</h1>\n            <h3> Enter your username to get started!</h3>\n            <SearchComponent />\n        </>\n    );\n};\n\nexport default HomePage;","import fetchp from \"fetch-jsonp\";\nimport React, { FC, useEffect, useState } from \"react\";\nimport {Link, useParams} from \"react-router-dom\";\nimport { ErrorAlert, LoadingAlert } from \"./Alerts\";\nimport { SPEEDRUN_COM_URL } from \"./App\";\n\n\ninterface Game {\n    name: string,\n    id: string,\n    categories: Category[];\n}\n\ninterface Category {\n    gameName: string;\n    gameId: string;\n    categoryName: string;\n    categoryId: string;\n\n    subcategories: Subcategory[];\n}\n\ninterface Subcategory {\n    subcategoryKeyId: string;\n    subcategoryValueId: string;\n    subcategoryValueName: string;\n}\n\ninterface UserData {\n    id: string;\n    name: string;\n    games: Game[];\n}\n\ninterface CategoryLinkProps {\n    category: Category;\n    userData: UserData;\n}\n\nconst CategoryLink: FC<CategoryLinkProps> = ({category, userData}: CategoryLinkProps) => {\n    const subcategoryLinkString = category.subcategories.map((subcategory) => \n        `${subcategory.subcategoryKeyId}=${subcategory.subcategoryValueId}`\n    ).join(\"&\");\n\n    const subcategoryTextString = category.subcategories\n        .map((subcategory) => subcategory.subcategoryValueName)\n        .join(\", \");\n\n    return (\n        <li key={category.categoryId}>\n            <Link to={`/graph/${userData?.id}/${category.categoryId}?${subcategoryLinkString}`}>\n                {category.categoryName} {category.subcategories.length > 0 ? `- ${subcategoryTextString}` : \"\"}\n            </Link>\n        </li>\n    );\n};\n\ninterface GameLinkSetProps {\n    game: Game;\n    userData: UserData;\n}\nconst GameLinkSet: FC<GameLinkSetProps> = ({game, userData}: GameLinkSetProps) => {\n    return (\n        <>\n            <h3> {game.name} </h3>\n            {game.categories.map(category => (<CategoryLink key={category.categoryId} category={category} userData={userData}/>))}\n        </>\n    );\n};\n\nconst UserPage: FC =  () => {\n    const {id} = useParams<{id?: string}>();\n\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const [isError, setIsError] = useState<boolean>(false);\n    const [errorMessage, setErrorMessage] = useState<string>(\"\");\n\n    const [userData, setUserData] = useState<UserData | null>(null);\n\n    const getUserData = async () => {\n        try {\n\n            const dataRaw = await Promise.all([\n                fetchp(`${SPEEDRUN_COM_URL}/users/${id}`,{timeout: 30000}),\n                fetchp(`${SPEEDRUN_COM_URL}/users/${id}/personal-bests?embed=game,category`,{timeout: 30000})\n            ]);\n\n            const [userApiData, pbData] = await Promise.all(dataRaw.map((raw) => raw.json()));\n\n            const categoryData: Category[] = await Promise.all(pbData.data.map(async (pb: any) => {\n                if(pb.category.data.type === \"per-level\") {\n                    // TODO implement this\n                    return null;\n                }\n                const category: Category = {\n                    gameName: pb.game.data.names.international,\n                    gameId:  pb.game.data.id,\n                    categoryName: pb.category.data.name,\n                    categoryId: pb.category.data.id,\n\n                    subcategories: []\n                };\n                \n                await Promise.all(Object.entries(pb.run.values).map(async ([key, value]: [string, unknown]) => {\n                    const variableDataRaw = await fetchp(`${SPEEDRUN_COM_URL}/variables/${key}`);\n                    const variableData = await variableDataRaw.json();\n                    \n                    category.subcategories.push({\n                        subcategoryKeyId: key,\n                        subcategoryValueId: value as string,\n                        subcategoryValueName: variableData.data.values.values[value as string].label\n                    });\n                }));\n\n                return category;\n            }));\n\n            const games: Game[] = [];\n\n            categoryData.forEach(category=> {\n                if(category===null) return;\n                let added = false;\n                games.forEach(game => {\n                    if(game.id === category.gameId) {\n                        game.categories.push(category);\n                        added = true;\n                    }\n                });\n\n                if(!added) games.push({\n                    id: category.gameId,\n                    name: category.gameName,\n                    categories: [category]\n                });\n            });\n\n            games.map(game=>({\n                ...game,\n                categories: game.categories.sort((a,b) => a.categoryName.localeCompare(b.categoryName))\n            }));\n            \n            setIsLoading(false);\n\n            setUserData({\n                id: userApiData.data.id,\n                name: userApiData.data.names.international,\n                games: games\n            });\n        } catch (error) {\n            setIsError(true);\n            setErrorMessage(error.message);\n            console.error(error);\n        }\n    };\n\n    useEffect(()=>{getUserData();},[]);\n\n    if(isError) return <ErrorAlert error={errorMessage} />;\n    if(isLoading) return <LoadingAlert/>;\n\n\n    \n    return (<>\n        <h2>Categories for {userData?.name}</h2>\n        {userData?.games.map((game: Game) => (\n            <GameLinkSet game={game} userData={userData} key={game.id} />\n        ))}\n    </>);\n\n};\n\nexport default UserPage;","import fetchp from \"fetch-jsonp\";\nimport React, { useEffect, useState, FC } from \"react\";\nimport { useParams } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport { ErrorAlert, LoadingAlert } from \"./Alerts\";\n\nimport {SPEEDRUN_COM_URL} from \"./App\";\n\n\ninterface Result {\n    id: string;\n    name: string;\n}\n\nconst SearchPage: FC = () => {\n    const [results, setResults] = useState<Result[]>([]);\n    const {query} = useParams<{query: string}>();\n\n    const [isError, setIsError] = useState<boolean>(false);\n    const [errorMessage, setErrorMessage] = useState<string>(\"\");\n\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n\n\n    const getInfo = async () => {\n        try {\n\n            const raw_data = await fetchp(`${SPEEDRUN_COM_URL}/users?name=${query}`, {timeout: 30000});\n            const data = await raw_data.json();\n\n            setResults(data.data.map(\n                ({id, names}: any) => ({\n                    id, \n                    name: names.international\n                })\n            ));\n\n            setIsLoading(false);\n\n        } catch(error)  {\n            console.error(error);\n            setIsError(true);\n            setErrorMessage(`Error ${errorMessage} occurred`);\n        }\n    };\n\n    useEffect(() => {getInfo();} , [query]);\n\n    if(isError) return <ErrorAlert error={errorMessage} />;\n    if(isLoading) return <LoadingAlert/>;\n\n    return (\n        <>\n            <h3>Results for {query}:</h3>\n            <ul>\n                {results.length > 0 ? results.map(({id, name}) => (\n                    <li key={id}><Link to={`/user/${id}`}>{name} </Link></li>\n                )) : (<p>No users found. <Link to=\"/\">Search again?</Link></p>)}\n            </ul>\n        </>\n    );\n\n};\n\nexport default SearchPage;","import React, { FC } from \"react\";\n\nimport { HashRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport GraphPage from \"./GraphPage\";\n\nimport HomePage from \"./HomePage\";\nimport UserPage from \"./UserPage\";\n\nimport Container from \"react-bootstrap/Container\";\nimport { Nav, Navbar } from \"react-bootstrap\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport SearchPage from \"./SearchPage\";\nimport SearchComponent from \"./SearchComponent\";\nimport NavbarCollapse from \"react-bootstrap/esm/NavbarCollapse\";\nimport { Github } from \"react-bootstrap-icons\";\n\n\nexport const SPEEDRUN_COM_URL = \"https://speedrun.com/api/v1\";\n\n\nconst App : FC = ()  => {\n    return (\n        <Router>\n            <Navbar bg=\"dark\" expand=\"lg\" className=\"mb-4\" style={{justifyContent:\"space-between\"}}>\n                <Nav>\n                    <Navbar.Brand href=\"#/\" style={{color: \"white\"}}>Speedrun PB Grapher</Navbar.Brand>\n                    <Nav.Link href=\"#/\" style={{color: \"white\"}}>Home</Nav.Link>\n                </Nav>\n                <Nav className=\"float-right\">\n                    <SearchComponent/>\n                    <Nav.Link href=\"https://github.com/Hurricane996/speedrun-pb-graph\"><Github style={{color: \"white\"}} className=\"ml-auto\"/></Nav.Link>\n                </Nav>\n            </Navbar>\n            <Container>\n                <Switch>\n                    <Route path=\"/user/:id\" exact>\n                        <UserPage />\n                    </Route>\n                    <Route path=\"/graph/:userId/:categoryId\" exact>\n                        <GraphPage />\n                    </Route>\n                    <Route path=\"/search/:query\" exact>\n                        <SearchPage />\n                    </Route>\n                    <Route path=\"/\" exact>\n                        <HomePage/>\n                    </Route>\n                    <Route>404</Route>\n                </Switch>\n            </Container>\n        </Router>\n    );\n};\n\n\nexport default App;\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}