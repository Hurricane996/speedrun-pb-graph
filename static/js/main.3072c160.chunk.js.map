{"version":3,"sources":["componentrs/Alerts.tsx","utils/makeHumanReadable.tsx","pages/GraphPage.tsx","componentrs/SearchComponent.tsx","pages/HomePage.tsx","pages/UserPage.tsx","pages/SearchPage.tsx","App.tsx","index.tsx"],"names":["ErrorAlert","error","Alert","variant","LoadingAlert","makeHumanReadable","input","ms","s","Math","floor","m","h","msString","toFixed","slice","sString","mString","hString","getData","userId","categoryId","isIL","levelId","searchParams","setIsLoading","setIsError","setErrorMessage","setResults","a","Error","result","gameName","categoryName","levelName","subcategoryString","username","runs","Promise","all","fetchp","SPEEDRUN_COM_URL","timeout","categoryDataRaw","userDataRaw","runsDataRaw","json","categoryData","userData","runsData","data","game","names","international","name","entries","map","key","value","dataRaw","values","label","join","levelDataRaw","levelData","filter","run","status","Object","every","runKey","get","date","DateTime","fromFormat","zone","time","times","primary_t","id","sort","first","second","message","console","GraphPage","useParams","theChart","useRef","URLSearchParams","useLocation","search","useState","isLoading","isError","errorMessage","setData","useEffect","chartData","labels","datasets","borderColor","chartOptions","onClick","current","activeElements","getActiveElements","length","index","window","location","href","responsive","scales","x","type","tooltipFormat","y","ticks","callback","plugins","tooltip","callbacks","tooltipItem","parsed","to","Jumbotron","ref","options","SearchComponent","setSearch","history","useHistory","Form","inline","onSubmit","e","preventDefault","push","InputGroup","Control","placeholder","onChange","target","Button","HomePage","FullGameCategoryLink","category","userID","subcategoryLinkString","subcategories","subcategory","subcategoryKeyId","subcategoryValueId","subcategoryTextString","subcategoryValueName","LevelCategoryLink","GameLinkSet","fullGameCategories","JSON","stringify","levelCategories","loadVariables","variables","variableDataRaw","variableData","getUserData","setUserData","userApiDataRaw","pbDataRaw","userApiData","pbData","pbDataGrouped","groupBy","pb","pbDataFullGame","pbDataIL","gameId","categoryDataFullGame","b","level","categoryDataILs","gameIds","Set","games","UserPage","getInfo","query","offset","outData","exactMatch","results","hasNext","rawLookupData","lookupData","rawData","undefined","pagination","links","find","link","rel","SearchPage","strOffset","parseInt","max","App","Navbar","bg","expand","className","style","justifyContent","Nav","Brand","color","Link","Container","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3072c160.chunk.js","sourcesContent":["import React, {FC} from \"react\";\nimport Alert from \"react-bootstrap/esm/Alert\";\n\ninterface ErrorProps {\n    error: string;\n}\nexport const ErrorAlert : FC<ErrorProps> = ({error} : ErrorProps) => (\n    <Alert variant=\"danger\">An error occured: {error}</Alert>\n);\n\nexport const LoadingAlert: FC = () => (\n    <Alert variant=\"info\">Loading...</Alert>\n);","export const makeHumanReadable = (input: number): string => {\n    const ms = input % 1;\n    const s = Math.floor(input) % 60;\n    const m = Math.floor(input / 60) % 60;\n    const h = Math.floor(input / 3600);\n\n    const msString = ms === 0 ? \"\" : ms.toFixed(3).slice(1);\n\n    const sString = s < 10 ? `0${s}` : `${s}`;\n\n    const mString = m < 10 ? `0${m}` : `${m}`;\n    const hString = h === 0 ? \"\" : `${h}:`;\n\n    return `${hString}${mString}:${sString}${msString}`;\n};\n","import fetchp from \"fetch-jsonp\";\nimport React, { FC, useEffect, useState, useRef, SetStateAction, Dispatch } from \"react\";\nimport { useLocation, useParams } from \"react-router\";\nimport { SPEEDRUN_COM_URL } from \"../App\";\nimport { Line} from \"react-chartjs-2\";\nimport \"chartjs-adapter-luxon\";\nimport { DateTime } from \"luxon\";\nimport { Link } from \"react-router-dom\";\nimport { Jumbotron } from \"react-bootstrap\";\nimport { ErrorAlert, LoadingAlert } from \"../componentrs/Alerts\";\nimport { SRCCategory_g, SRCLevel, SRCResult, SRCRun, SRCUser, SRCVariable } from \"../types/SRCQueryResults\";\nimport Chart from \"chart.js\";\nimport { makeHumanReadable } from \"../utils/makeHumanReadable\";\n\ninterface Run {\n    date: DateTime;\n    time: number;\n    id: string;\n}\n\ninterface Results {\n    gameName: string,\n    categoryName: string,\n    levelName: string,\n    subcategoryString: string,\n    username: string,\n    runs: Run[]\n\n}\n\nconst getData = async (\n    userId: string | undefined,\n    categoryId: string | undefined,\n    isIL: boolean,\n    levelId: string | undefined,\n    searchParams: URLSearchParams,\n\n    setIsLoading: Dispatch<SetStateAction<boolean>>,\n    setIsError:   Dispatch<SetStateAction<boolean>>,\n    setErrorMessage: Dispatch<SetStateAction<string>>,\n\n    setResults: Dispatch<SetStateAction<Results|undefined>>\n\n) => {\n    try {\n        if(!userId) {\n            throw new Error(\"No user id provided\");\n        }\n        if(!categoryId) {\n            throw new Error(\"No user id provided\");\n        }\n\n        const result: Results = {\n            gameName: \"\",\n            categoryName: \"\",\n            levelName: \"\",\n            subcategoryString: \"\",\n            username: \"\",\n            runs: [] \n        };\n\n        const [categoryDataRaw, userDataRaw, runsDataRaw] = await Promise.all([\n            fetchp(`${SPEEDRUN_COM_URL}/categories/${categoryId}?embed=game`,{timeout: 30000}),\n            fetchp(`${SPEEDRUN_COM_URL}/users/${userId}`,{timeout: 30000}),\n            isIL \n                ? fetchp(`${SPEEDRUN_COM_URL}/runs?user=${userId}&level=${levelId}&category=${categoryId}&max=200`,{timeout: 30000})\n                : fetchp(`${SPEEDRUN_COM_URL}/runs?user=${userId}&category=${categoryId}&max=200`,{timeout: 30000})\n        ]);\n        const [categoryData, userData, runsData] = await Promise.all([\n            categoryDataRaw.json<SRCResult<SRCCategory_g>>(),\n            userDataRaw.json<SRCResult<SRCUser>>(),\n            runsDataRaw.json<SRCResult<SRCRun[]>>(),\n\n        ]);\n\n\n        result.gameName = categoryData.data.game.data.names.international;\n        result.categoryName = categoryData.data.name;\n        \n        result.subcategoryString = (await Promise.all([...searchParams.entries()].map(async ([key,value]: [string,string]) : Promise<string> => {\n            const dataRaw = await fetchp(`${SPEEDRUN_COM_URL}/variables/${key}`);\n            const data = await dataRaw.json<SRCResult<SRCVariable>>();\n            return data.data.values.values[value as string].label;\n        }))).join(\", \");\n\n        if(isIL) {\n            const levelDataRaw = await fetchp(`${SPEEDRUN_COM_URL}/levels/${levelId}`);\n            const levelData = await levelDataRaw.json<SRCResult<SRCLevel>>();\n\n            result.levelName = levelData.data.name;\n        }\n        \n        result.username = userData.data.names.international;\n\n        result.runs = runsData.data\n            .filter(run=> run.status.status !== \"rejected\")\n            // only accept runs of the suggested subcategory\n            .filter(run=> Object.entries(run.values).every(([runKey, runValue] :[string, string]) => runValue as string === searchParams.get(runKey)))\n            .map(run => ({\n                date: DateTime.fromFormat(run.date, \"yyyy-MM-dd\", {zone: \"UTC\"}), \n                time: run.times.primary_t,\n                id: run.id\n            }))\n            // sort the runs, otherwise it will play connect the dots\n            .sort((first: Run, second: Run) => (\n                first.date === second.date\n                    ? (first.time < second.time ? -1 : 1)\n                    : (first.date < second.date ? -1 : 1)               \n            ));\n\n        setResults(result);\n\n        setIsLoading(false);\n    } catch (e) {\n        setIsError(true);\n        setErrorMessage(e.message);\n        console.error(e);\n    }\n};\n\ninterface GraphPageProps {\n    isIL: boolean;\n}\n\nconst GraphPage: FC<GraphPageProps> = ({isIL} : GraphPageProps) => \n{\n    // note level id will be null when isIL is false.\n    const {userId, categoryId, levelId} = useParams<{userId?: string, categoryId?: string, levelId?: string}>();\n\n    const theChart = useRef<Chart.Chart| null>(null);\n\n    const searchParams = new URLSearchParams(useLocation().search);\n\n\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const [isError, setIsError] = useState<boolean>(false);\n    const [errorMessage, setErrorMessage] = useState<string>(\"\");\n\n    const [data, setData] = useState<Results>();\n\n\n    \n\n    useEffect(() => {\n        getData(\n            userId, categoryId, isIL, levelId, searchParams, \n            setIsLoading, setIsError, setErrorMessage, \n            setData);\n    }, []);\n    \n    if(isError) return <ErrorAlert error={errorMessage} />;\n    if(isLoading) return <LoadingAlert/>;\n\n    const chartData = {\n        labels: data?.runs.map(run=>run.date),\n        datasets: [{\n            label: \"Time\",\n            data: data?.runs.map(run=>run.time),\n            borderColor: \"rgb(255,0,0)\",\n        }]\n    };\n\n    const onChartClick = () => {\n        // somehow the user clicked on the chart before the ref was set... shouldn't be possible\n        if(!theChart.current) return;\n        const activeElements = theChart.current.getActiveElements();\n        if(activeElements.length > 0) {\n            const run = data?.runs[activeElements[0].index];\n            window.location.href = `https://speedrun.com/run/${run?.id}`;\n        }\n    };\n\n    const chartOptions: Chart.ChartOptions = {\n        onClick: onChartClick,\n        responsive: true,\n        scales: {\n            x: {\n                type: \"time\",\n                time: {\n                    tooltipFormat: \"MMM d, yyyy\"\n                }\n            },\n            y: {\n                ticks: {\n                    // if this isn't a number we're *really* fucked\n                    callback: (value: number| string) => makeHumanReadable(value as number)\n                }\n            }\n        },\n        plugins: {\n            tooltip: {\n                callbacks: {\n                    label: (tooltipItem: Chart.TooltipItem<\"line\">) => makeHumanReadable(tooltipItem.parsed.y)\n                }\n            }\n        }\n    };\n\n    return (\n        <>\n            <h1>{data?.gameName} : {isIL ? data?.levelName+ \" \" : \"\"} {data?.categoryName} - {data?.subcategoryString ? data.subcategoryString + \" - \" : \"\"}{data?.username}</h1>\n            <Link to={`/user/${userId}`} >Back to user</Link>\n            <p><b> Click a data-point to see the associated run&apos;s speedrun.com page!</b></p>\n            <Jumbotron>\n                <Line ref={theChart} type='line' data={chartData} options={chartOptions} />\n            </Jumbotron>\n        </>\n    );\n};\nexport default GraphPage;","import React, { useState, ChangeEvent, FormEvent, FC } from \"react\";\nimport { Search } from \"react-bootstrap-icons\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport { useHistory } from \"react-router\";\n\nconst SearchComponent: FC = () => {\n    const [search, setSearch] = useState<string>(\"\");\n    const history = useHistory();\n\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        setSearch(e.target.value);\n    };\n\n    const submit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        history.push(`/search/${search}`);\n    };\n    return (    \n        <Form inline onSubmit={submit}>\n            <InputGroup>\n                <Form.Control type=\"search\"  name=\"username\" id=\"searchInput\" placeholder=\"speedrun.com username\" value={search} onChange={handleChange}/>\n                <Button type=\"submit\"><Search/></Button>\n            </InputGroup>\n        </Form>\n    );\n};\n\nexport default SearchComponent;","import React, {  FC  } from \"react\";\n\nimport SearchComponent from \"../componentrs/SearchComponent\";\n\nconst HomePage: FC = () => {\n\n\n    return (\n        <>\n            <h1> Welcome to the Speedrun PB Grapher</h1>\n            <h3> Enter your username to get started!</h3>\n            <SearchComponent />\n        </>\n    );\n};\n\nexport default HomePage;","import fetchp from \"fetch-jsonp\";\nimport React, { Dispatch, FC, SetStateAction, useEffect, useState } from \"react\";\nimport {Link, useParams} from \"react-router-dom\";\nimport { ErrorAlert, LoadingAlert } from \"../componentrs/Alerts\";\nimport { SPEEDRUN_COM_URL } from \"../App\";\nimport { groupBy } from \"lodash\";\nimport { SRCResult, SRCUser, SRCVariableSet, SRCPB_gcl } from \"../types/SRCQueryResults\";\n\n\ninterface Game {\n    name: string,\n    id: string,\n    fullGameCategories: Category[];\n    levelCategories: LevelCategory[]\n}\n\ninterface LevelCategory extends Category {\n    levelId: string,\n    levelName: string\n}\n\ninterface Category {\n    gameName: string;\n    gameId: string;\n    categoryName: string;\n    categoryId: string;\n\n    subcategories: Subcategory[];\n}\n\ninterface Subcategory {\n    subcategoryKeyId: string;\n    subcategoryValueId: string;\n    subcategoryValueName: string;\n}\n\ninterface UserData {\n    id: string;\n    name: string;\n    games: Game[];\n}\n\ninterface CategoryLinkProps {\n    category: Category;\n    userID: string;\n}\n\ninterface LevelCategoryLinkProps {\n    category: LevelCategory;\n    userID: string;\n}\n\nconst FullGameCategoryLink: FC<CategoryLinkProps> = ({category, userID}: CategoryLinkProps) => {\n    const subcategoryLinkString = category.subcategories.map((subcategory) => \n        `${subcategory.subcategoryKeyId}=${subcategory.subcategoryValueId}`\n    ).join(\"&\");\n\n    const subcategoryTextString = category.subcategories\n        .map((subcategory) => subcategory.subcategoryValueName)\n        .join(\", \");\n\n    return (\n        <li>\n            <Link to={`/graph/${userID}/${category.categoryId}?${subcategoryLinkString}`}>\n                {category.categoryName} {category.subcategories.length > 0 ? `- ${subcategoryTextString}` : \"\"}\n            </Link>\n        </li>\n    );\n};\n\n\nconst LevelCategoryLink: FC<LevelCategoryLinkProps> = ({category, userID}: LevelCategoryLinkProps) => {\n    const subcategoryLinkString = category.subcategories.map((subcategory) => \n        `${subcategory.subcategoryKeyId}=${subcategory.subcategoryValueId}`\n    ).join(\"&\");\n\n    const subcategoryTextString = category.subcategories\n        .map(subcategory => subcategory.subcategoryValueName)\n        .join(\", \");\n\n    return (\n        <li>\n            <Link to={`/graph/il/${userID}/${category.levelId}/${category.categoryId}?${subcategoryLinkString}`}>\n                {category.levelName} {category.categoryName} {category.subcategories.length > 0 ? `- ${subcategoryTextString}` : \"\"}\n            </Link>\n        </li>\n    );\n};\n\n\ninterface GameLinkSetProps {\n    game: Game;\n    userData: UserData;\n}\nconst GameLinkSet: FC<GameLinkSetProps> = ({game, userData}: GameLinkSetProps) => {\n    return (\n        <>\n            <h1> {game.name} </h1>\n            {game.fullGameCategories.length > 0 ? <h2>Full game runs:</h2> : <></>}\n            <ul>\n                {game.fullGameCategories.map((category) => (\n                    <FullGameCategoryLink key={JSON.stringify(category)} category={category} userID={userData.id}/>\n                ))}\n            </ul>\n            {game.levelCategories.length > 0 ? <h2>IL runs:</h2> : <></>}\n            <ul>\n                {game.levelCategories.map((category) => (\n                    <LevelCategoryLink key={JSON.stringify(category)} category={category} userID={userData.id}/>\n                ))}\n            </ul>\n        </>\n    );\n};\n\nconst loadVariables = async (variables: SRCVariableSet): Promise<Subcategory[]> => {\n    return await Promise.all(Object.entries(variables).map(async ([key, value]: [string, unknown]) => {\n        const variableDataRaw = await fetchp(`${SPEEDRUN_COM_URL}/variables/${key}`);\n        const variableData = await variableDataRaw.json();\n        \n        return {\n            subcategoryKeyId: key,\n            subcategoryValueId: value as string,\n            subcategoryValueName: variableData.data.values.values[value as string].label\n        };\n    }));\n};\n\n\n\nconst getUserData = async (\n    id: string, \n    setIsLoading: Dispatch<SetStateAction<boolean>> , \n    setIsError: Dispatch<SetStateAction<boolean>>, \n    setErrorMessage: Dispatch<SetStateAction<string>>, \n    setUserData: Dispatch<SetStateAction<UserData| null>> \n) => {\n    try {\n\n        const [userApiDataRaw, pbDataRaw] = await Promise.all([\n            fetchp(`${SPEEDRUN_COM_URL}/users/${id}`,{timeout: 30000}),\n            fetchp(`${SPEEDRUN_COM_URL}/users/${id}/personal-bests?embed=game,category,level`,{timeout: 30000})\n        ]);\n\n        const [userApiData, pbData] = await Promise.all([\n            userApiDataRaw.json<SRCResult<SRCUser>>(),\n            pbDataRaw.json<SRCResult<SRCPB_gcl[]>>()\n        ]);\n\n        const pbDataGrouped  = groupBy(pbData.data, pb => pb.category.data.type);\n\n        const pbDataFullGame = pbDataGrouped[\"per-game\"] ?? [];\n        const pbDataIL = pbDataGrouped[\"per-level\"] ?? [];\n        \n        const categoryDataFullGame: Category[] = (await Promise.all(pbDataFullGame.map(async pb => ({\n            gameName: pb.game.data.names.international,\n            gameId:  pb.game.data.id,\n            categoryName: pb.category.data.name,\n            categoryId: pb.category.data.id,\n\n            subcategories: await loadVariables(pb.run.values)\n        })))).sort((a: Category, b: Category) => {\n            if(a.categoryName < b.categoryName) return -1;\n            if(a.categoryName > b.categoryName) return 1;\n            if(a.subcategories.length == 0) return 0;\n            if(a.subcategories[0].subcategoryValueName < b.subcategories[0].subcategoryValueName) return -1;\n            if(a.subcategories[0].subcategoryValueName > b.subcategories[0].subcategoryValueName) return 1;\n            return 0;\n        });\n\n\n        const categoryDataILs: LevelCategory[] = (await Promise.all((pbDataIL.map(async pb => ({\n            gameName: pb.game.data.names.international,\n            gameId:  pb.game.data.id,\n            categoryName: pb.category.data.name,\n            categoryId: pb.category.data.id,\n            levelId: pb.level.data.id,\n            levelName: pb.level.data.name,\n\n            subcategories: await loadVariables(pb.run.values)        \n        }))))).sort((a: LevelCategory, b: LevelCategory) => {\n            if(a.levelName < b.levelName) return -1;\n            if(a.levelName > b.levelName) return 1;\n            if(a.categoryName < b.categoryName) return -1;\n            if(a.categoryName > b.categoryName) return 1;\n            if(a.subcategories.length == 0) return 0;\n            if(a.subcategories[0].subcategoryValueName < b.subcategories[0].subcategoryValueName) return -1;\n            if(a.subcategories[0].subcategoryValueName > b.subcategories[0].subcategoryValueName) return 1;\n\n            return 0;\n        });\n\n        const gameIds: string[] = [...new Set<string>(pbData.data.map(pb => pb.game.data.id))];\n\n        const games: Game[] = gameIds.map(id => {\n            const fullGameCategories = categoryDataFullGame.filter(category => category.gameId === id);\n            const levelCategories = categoryDataILs.filter(category => category.gameId === id);\n\n            return {\n                id,\n                name: fullGameCategories.length > 0 ? fullGameCategories[0].gameName : levelCategories[0].gameName,\n                fullGameCategories,\n                levelCategories,\n            };\n        });\n\n\n        setUserData({\n            id: userApiData.data.id,\n            name: userApiData.data.names.international,\n            games: games\n        });\n      \n        setIsLoading(false);\n\n    } catch (error) {\n        setIsError(true);\n        setErrorMessage(error.message);\n        console.error(error);\n    }\n};\n\nconst UserPage: FC =  () => {\n    const {id} = useParams<{id: string}>();\n\n    const [data, setData] = useState<UserData | null>(null);\n\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const [isError, setIsError] = useState<boolean>(false);\n    const [errorMessage, setErrorMessage] = useState<string>(\"\");\n\n\n   \n\n    useEffect(()=>{getUserData(id, setIsLoading, setIsError, setErrorMessage, setData);},[]);\n\n    if(isError) return <ErrorAlert error={errorMessage} />;\n    if(isLoading) return <LoadingAlert/>;\n\n\n    \n    return (<>\n        <h2>Categories for {data?.name}</h2>\n        {data && data?.games?.length > 0 ? data?.games.map((game: Game) => (\n            <GameLinkSet game={game} userData={data} key={game.id} />\n        )) : (<p>This user hasn&apos;t submitted any runs</p>)}\n    </>);\n\n};\n\nexport default UserPage;","import fetchp from \"fetch-jsonp\";\nimport React, { useEffect, useState, FC, Dispatch, SetStateAction } from \"react\";\nimport { useLocation, useParams } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport { ErrorAlert, LoadingAlert } from \"../componentrs/Alerts\";\nimport {SPEEDRUN_COM_URL} from \"../App\";\nimport { SRCPaginatedResult, SRCResult, SRCUser } from \"../types/SRCQueryResults\";\n\ninterface Result {\n    id: string;\n    name: string;\n}\n\ninterface GetInfoData {\n    exactMatch: Result | null,\n    results: Result[],\n    hasNext: boolean\n}\n\nconst getInfo = async (\n    query: string,\n    offset: number,\n\n    setData: Dispatch<SetStateAction<GetInfoData|null>>,\n    setIsLoading: Dispatch<SetStateAction<boolean>>,\n    setIsError: Dispatch<SetStateAction<boolean>>,\n    setErrorMessage: Dispatch<SetStateAction<string>>,\n\n) => {\n\n\n    setIsLoading(true);\n\n    const outData: GetInfoData = {\n        exactMatch: null,\n        results: [],\n        hasNext: false\n    };\n\n    try {  \n        const rawLookupData = await fetchp(`${SPEEDRUN_COM_URL}/users?lookup=${query}`, {timeout: 30000});\n        const lookupData = await rawLookupData.json<SRCResult<SRCUser[]>>();\n\n        if(lookupData.data.length > 0) {\n            outData.exactMatch = {\n                id: lookupData.data[0].id,\n                name: lookupData.data[0].names.international\n            };\n        }\n\n\n\n        const rawData = await fetchp(`${SPEEDRUN_COM_URL}/users?name=${query}&offset=${offset}`, {timeout: 30000});\n        const data = await rawData.json<SRCPaginatedResult<SRCUser[]>>();\n\n        outData.results = data.data.map(\n            ({id, names}) => ({\n                id, \n                name: names.international\n            }) \n        );\n\n        outData.hasNext = data.pagination.links.find(link => link.rel == \"next\") !== undefined;\n\n\n        setData(outData);\n        setIsLoading(false);\n\n    } catch(error)  {\n        console.error(error);\n        setIsError(true);\n        setErrorMessage(`Error ${error.message} occurred`);\n    }\n};\n\n\nconst SearchPage: FC = () => {\n    const [data, setData] = useState<GetInfoData|null>(null);\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const [isError, setIsError] = useState<boolean>(false);\n    const [errorMessage, setErrorMessage] = useState<string>(\"\");\n\n    const {query } = useParams<{query: string}>();\n\n    const location = useLocation();\n\n    const searchParams = new URLSearchParams(location.search);\n\n\n    const strOffset = searchParams.get(\"offset\");\n    const offset = strOffset ? parseInt(strOffset) : 0;\n\n\n    \n    useEffect(() => {getInfo(query,offset,setData,setIsLoading,setIsError,setErrorMessage,);} , [query, location]);\n\n    if(isError) return <ErrorAlert error={errorMessage} />;\n    if(isLoading) return <LoadingAlert/>;\n\n    return (\n        <>\n            <h3>Results for {query}:</h3>\n            <ul>\n                {data?.exactMatch && <p><b>An exact match was found: <Link to={`/user/${data.exactMatch.id}`}>{data.exactMatch.name} </Link></b></p> }\n                {data?.results && data.results.length > 0 ? data.results.map(({id, name}) => (\n                    <li key={id}><Link to={`/user/${id}`}>{name} </Link></li>\n                )) : (<p>No users found. <Link to=\"/\">Search again?</Link></p>)}\n            </ul>\n\n            {offset > 0 && (<Link to={`/search/${query}?offset=${Math.max(0, offset - 20)}`}>&lt;Prev</Link>)}\n            {offset > 0 && data?.hasNext && \" - \"}\n            {data?.hasNext && (<Link to={`/search/${query}?offset=${offset + 20}`}>Next &gt;</Link>)}\n        </>\n    );\n\n};\n\nexport default SearchPage;","import React, { FC } from \"react\";\n\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport GraphPage from \"./pages/GraphPage\";\n\nimport HomePage from \"./pages/HomePage\";\nimport UserPage from \"./pages/UserPage\";\n\nimport Container from \"react-bootstrap/Container\";\nimport { Nav, Navbar } from \"react-bootstrap\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport SearchPage from \"./pages/SearchPage\";\nimport SearchComponent from \"./componentrs/SearchComponent\";\nimport { Github } from \"react-bootstrap-icons\";\n\n\nexport const SPEEDRUN_COM_URL = \"https://speedrun.com/api/v1\";\n\n\nconst App : FC = ()  => {\n    return (\n        <Router>\n            <Navbar bg=\"dark\" expand=\"lg\" className=\"mb-4\" style={{justifyContent:\"space-between\"}}>\n                <Nav>\n                    <Navbar.Brand href=\"#/\" style={{color: \"white\"}}>Speedrun PB Grapher</Navbar.Brand>\n                    <Nav.Link href=\"#/\" style={{color: \"white\"}}>Home</Nav.Link>\n                </Nav>\n                <Nav className=\"float-right\">\n                    <SearchComponent/>\n                    <Nav.Link href=\"https://github.com/Hurricane996/speedrun-pb-graph\"><Github style={{color: \"white\"}} className=\"ml-auto\"/></Nav.Link>\n                </Nav>\n            </Navbar>\n            <Container>\n                <Switch>\n                    <Route path=\"/user/:id\" exact>\n                        <UserPage />\n                    </Route>\n                    <Route path=\"/graph/il/:userId/:levelId/:categoryId\" exact>\n                        <GraphPage isIL={true}/>\n                    </Route>\n                    <Route path=\"/graph/:userId/:categoryId\" exact>\n                        <GraphPage isIL={false}/>\n                    </Route>\n                    <Route path=\"/search/:query\" exact>\n                        <SearchPage />\n                    </Route>\n                    <Route path=\"/\" exact>\n                        <HomePage/>\n                    </Route>\n                    <Route>404</Route>\n                </Switch>\n            </Container>\n        </Router>\n    );\n};\n\n\nexport default App;\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}