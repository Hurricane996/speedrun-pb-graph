{"version":3,"sources":["Alerts.tsx","GraphPage.tsx","SearchComponent.tsx","HomePage.tsx","UserPage.tsx","SearchPage.tsx","App.tsx","index.tsx"],"names":["ErrorAlert","error","Alert","variant","LoadingAlert","makeHumanReadable","input","ms","s","Math","floor","m","h","msString","toFixed","slice","sString","mString","hString","GraphPage","isIL","useParams","userId","categoryId","levelId","theChart","useRef","search","URLSearchParams","useLocation","useState","isLoading","setIsLoading","isError","setIsError","errorMessage","setErrorMessage","gameName","setGameName","categoryName","setCategoryName","username","setUsername","subcategoryString","setSubcategoryString","levelName","setLevelName","runs","setRuns","getData","a","Promise","all","fetchp","SPEEDRUN_COM_URL","timeout","categoryDataRaw","userDataRaw","runsDataRaw","json","categoryData","userData","runsData","levelData","levelDataRaw","data","name","entries","map","key","value","dataRaw","values","label","join","game","names","international","filter","run","status","Object","every","runKey","get","date","DateTime","fromFormat","zone","time","times","primary_t","id","sort","first","second","message","console","useEffect","chartData","labels","datasets","borderColor","chartOptions","onClick","current","activeElements","getActiveElements","length","index","window","location","href","responsive","scales","x","type","tooltipFormat","y","ticks","callback","plugins","tooltip","callbacks","tooltipItem","parsed","to","Jumbotron","ref","options","SearchComponent","setSearch","history","useHistory","Form","inline","onSubmit","e","preventDefault","push","InputGroup","Control","placeholder","onChange","target","Button","HomePage","FullGameCategoryLink","category","userID","subcategoryLinkString","subcategories","subcategory","subcategoryKeyId","subcategoryValueId","subcategoryTextString","subcategoryValueName","LevelCategoryLink","GameLinkSet","fullGameCategories","JSON","stringify","levelCategories","loadVariables","variables","variableDataRaw","variableData","getUserData","setUserData","userApiDataRaw","pbDataRaw","userApiData","pbData","pbDataGrouped","groupBy","pb","pbDataFullGame","pbDataIL","gameId","categoryDataFullGame","b","level","categoryDataILs","gameIds","Set","games","UserPage","SearchPage","results","setResults","query","exactMatch","setExactMatch","getInfo","rawLookupData","lookupData","rawData","App","Navbar","bg","expand","className","style","justifyContent","Nav","Brand","color","Link","Container","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bf48e2fc.chunk.js","sourcesContent":["import React, {FC} from \"react\";\nimport Alert from \"react-bootstrap/esm/Alert\";\n\ninterface ErrorProps {\n    error: string;\n}\nexport const ErrorAlert : FC<ErrorProps> = ({error} : ErrorProps) => (\n    <Alert variant=\"danger\">An error occured: {error}</Alert>\n);\n\nexport const LoadingAlert: FC = () => (\n    <Alert variant=\"info\">Loading...</Alert>\n);","import fetchp from \"fetch-jsonp\";\nimport React, { FC, useEffect, useState, useRef } from \"react\";\nimport { useLocation, useParams } from \"react-router\";\nimport { SPEEDRUN_COM_URL } from \"./App\";\nimport { Line} from \"react-chartjs-2\";\nimport \"chartjs-adapter-luxon\";\nimport { DateTime } from \"luxon\";\nimport { Link } from \"react-router-dom\";\nimport { Jumbotron } from \"react-bootstrap\";\nimport { ErrorAlert, LoadingAlert } from \"./Alerts\";\nimport { SRCCategory_g, SRCLevel, SRCResult, SRCRun, SRCUser, SRCVariable } from \"./SRCQueryResults\";\nimport Chart from \"chart.js\";\n\ninterface Run {\n    date: DateTime;\n    time: number;\n    id: string;\n}\n\nconst makeHumanReadable = (input: number): string => {\n    const ms = input % 1;\n    const s = Math.floor(input) % 60;\n    const m = Math.floor(input/60) % 60;\n    const h = Math.floor(input/3600);\n\n    const msString = ms === 0 ? \"\" : ms.toFixed(3).slice(1);\n\n    const sString = s < 10 ? `0${s}` : `${s}`;\n\n    const mString = m < 10 ? `0${m}` : `${m}`;\n    const hString = h === 0 ? \"\" : `${h}:`;\n\n    return `${hString}${mString}:${sString}${msString}`;\n};\n\n\n\ninterface GraphPageProps {\n    isIL: boolean;\n}\n\nconst GraphPage: FC<GraphPageProps> = ({isIL} : GraphPageProps) => \n{\n    // note level id will be null when isIL is false.\n    const {userId, categoryId, levelId} = useParams<{userId?: string, categoryId?: string, levelId?: string}>();\n\n    const theChart = useRef<Chart.Chart| null>(null);\n\n    const search = new URLSearchParams(useLocation().search);\n\n\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const [isError, setIsError] = useState<boolean>(false);\n    const [errorMessage, setErrorMessage] = useState<string>(\"\");\n\n    const [gameName, setGameName] = useState<string>(\"\");\n    const [categoryName, setCategoryName] = useState<string>(\"\");\n    const [username, setUsername] = useState<string>(\"\");\n    const [subcategoryString, setSubcategoryString] = useState<string>(\"\");\n\n    const [levelName, setLevelName] = useState<string>(\"\");\n\n    const [runs, setRuns] = useState<Run[]>([]);\n\n\n    const getData = async () => {\n\n        try {\n            const [categoryDataRaw, userDataRaw, runsDataRaw] = await Promise.all([\n                fetchp(`${SPEEDRUN_COM_URL}/categories/${categoryId}?embed=game`,{timeout: 30000}),\n                fetchp(`${SPEEDRUN_COM_URL}/users/${userId}`,{timeout: 30000}),\n                isIL \n                    ? fetchp(`${SPEEDRUN_COM_URL}/runs?user=${userId}&level=${levelId}&category=${categoryId}&max=200`,{timeout: 30000})\n                    : fetchp(`${SPEEDRUN_COM_URL}/runs?user=${userId}&category=${categoryId}&max=200`,{timeout: 30000})\n            ]);\n            const [categoryData, userData, runsData] = await Promise.all([\n                categoryDataRaw.json<SRCResult<SRCCategory_g>>(),\n                userDataRaw.json<SRCResult<SRCUser>>(),\n                runsDataRaw.json<SRCResult<SRCRun[]>>(),\n\n            ]);\n\n            let levelData: SRCResult<SRCLevel> | null = null;\n            if(isIL) {\n                const levelDataRaw = await fetchp(`${SPEEDRUN_COM_URL}/levels/${levelId}`);\n                levelData = await levelDataRaw.json<SRCResult<SRCLevel>>();\n\n                // the ?? \"\" shouldnt execute but it needs to be there to make ts happy.\n                setLevelName(levelData?.data.name ?? \"\");\n            }\n\n            \n            const subcategoryString = (await Promise.all([...search.entries()].map(async ([key,value]: [string,string]) : Promise<string> => {\n                const dataRaw = await fetchp(`${SPEEDRUN_COM_URL}/variables/${key}`);\n                const data = await dataRaw.json<SRCResult<SRCVariable>>();\n                return data.data.values.values[value as string].label;\n            }))).join(\", \");\n\n\n            setGameName(categoryData.data.game.data.names.international);\n            setCategoryName(categoryData.data.name);\n\n            setSubcategoryString(subcategoryString);\n\n            setUsername(userData.data.names.international);\n\n            setIsLoading(false);\n\n            setRuns(runsData.data\n                // filter out rejected runs\n                .filter(run=> run.status.status !== \"rejected\")\n                // only accept runs of the suggested subcategory\n                .filter(run=> Object.entries(run.values).every(([runKey, runValue] :[string, string]) => runValue as string === search.get(runKey)))\n                .map(run => ({\n                    date: DateTime.fromFormat(run.date, \"yyyy-MM-dd\", {zone: \"UTC\"}), \n                    time: run.times.primary_t,\n                    id: run.id\n                }))\n                // sort the runs, otherwise it will play connect the dots\n                .sort((first: Run, second: Run) => (\n                    first.date === second.date\n                        ? (first.time < second.time ? -1 : 1)\n                        : (first.date < second.date ? -1 : 1)               \n                ))\n            );\n        } catch (e) {\n            setIsError(true);\n            setErrorMessage(e.message);\n            console.error(e);\n        }\n    };\n\n    useEffect(() => {getData();}, []);\n    \n    if(isError) return <ErrorAlert error={errorMessage} />;\n    if(isLoading) return <LoadingAlert/>;\n\n    const chartData = {\n        labels: runs.map(run=>run.date),\n        datasets: [{\n            label: \"Time\",\n            data: runs.map(run=>run.time),\n            borderColor: \"rgb(255,0,0)\",\n        }]\n    };\n\n    const onChartClick = () => {\n        // somehow the user clicked on the chart before the ref was set... shouldn't be possible\n        if(!theChart.current) return;\n        const activeElements = theChart.current.getActiveElements();\n        if(activeElements.length > 0) {\n            const run = runs[activeElements[0].index];\n            window.location.href = `https://speedrun.com/run/${run.id}`;\n        }\n    };\n\n    const chartOptions: Chart.ChartOptions = {\n        onClick: onChartClick,\n        responsive: true,\n        scales: {\n            x: {\n                type: \"time\",\n                time: {\n                    tooltipFormat: \"MMM d, yyyy\"\n                }\n            },\n            y: {\n                ticks: {\n                    // if this isn't a number we're *really* fucked\n                    callback: (value: number| string) => makeHumanReadable(value as number)\n                }\n            }\n        },\n        plugins: {\n            tooltip: {\n                callbacks: {\n                    label: (tooltipItem: Chart.TooltipItem<\"line\">) => makeHumanReadable(tooltipItem.parsed.y)\n                }\n            }\n        }\n    };\n\n    return (\n        <>\n            <h1>{gameName} : {isIL ? levelName+ \" \" : \"\"} {categoryName} - {subcategoryString? subcategoryString+\" - \" : \"\"}{username}</h1>\n            <Link to={`/user/${userId}`} >Back to user</Link>\n            <p><b> Click a data-point to see the associated run&apos;s speedrun.com page!</b></p>\n            <Jumbotron>\n                <Line ref={theChart} type='line' data={chartData} options={chartOptions} />\n            </Jumbotron>\n        </>\n    );\n};\nexport default GraphPage;","import React, { useState, ChangeEvent, FormEvent, FC } from \"react\";\nimport { Search } from \"react-bootstrap-icons\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport { useHistory } from \"react-router\";\n\nconst SearchComponent: FC = () => {\n    const [search, setSearch] = useState<string>(\"\");\n    const history = useHistory();\n\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        setSearch(e.target.value);\n    };\n\n    const submit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        history.push(`/search/${search}`);\n    };\n    return (    \n        <Form inline onSubmit={submit}>\n            <InputGroup>\n                <Form.Control type=\"search\"  name=\"username\" id=\"searchInput\" placeholder=\"speedrun.com username\" value={search} onChange={handleChange}/>\n                <Button type=\"submit\"><Search/></Button>\n            </InputGroup>\n        </Form>\n    );\n};\n\nexport default SearchComponent;","import React, {  FC  } from \"react\";\n\nimport SearchComponent from \"./SearchComponent\";\n\nconst HomePage: FC = () => {\n\n\n    return (\n        <>\n            <h1> Welcome to the Speedrun PB Grapher</h1>\n            <h3> Enter your username to get started!</h3>\n            <SearchComponent />\n        </>\n    );\n};\n\nexport default HomePage;","import fetchp from \"fetch-jsonp\";\nimport React, { Dispatch, FC, SetStateAction, useEffect, useState } from \"react\";\nimport {Link, useParams} from \"react-router-dom\";\nimport { ErrorAlert, LoadingAlert } from \"./Alerts\";\nimport { SPEEDRUN_COM_URL } from \"./App\";\nimport { groupBy } from \"lodash\";\nimport { SRCResult, SRCUser, SRCVariableSet, SRCPB_gcl } from \"./SRCQueryResults\";\n\n\ninterface Game {\n    name: string,\n    id: string,\n    fullGameCategories: Category[];\n    levelCategories: LevelCategory[]\n}\n\ninterface LevelCategory extends Category {\n    levelId: string,\n    levelName: string\n}\n\ninterface Category {\n    gameName: string;\n    gameId: string;\n    categoryName: string;\n    categoryId: string;\n\n    subcategories: Subcategory[];\n}\n\ninterface Subcategory {\n    subcategoryKeyId: string;\n    subcategoryValueId: string;\n    subcategoryValueName: string;\n}\n\ninterface UserData {\n    id: string;\n    name: string;\n    games: Game[];\n}\n\ninterface CategoryLinkProps {\n    category: Category;\n    userID: string;\n}\n\ninterface LevelCategoryLinkProps {\n    category: LevelCategory;\n    userID: string;\n}\n\nconst FullGameCategoryLink: FC<CategoryLinkProps> = ({category, userID}: CategoryLinkProps) => {\n    const subcategoryLinkString = category.subcategories.map((subcategory) => \n        `${subcategory.subcategoryKeyId}=${subcategory.subcategoryValueId}`\n    ).join(\"&\");\n\n    const subcategoryTextString = category.subcategories\n        .map((subcategory) => subcategory.subcategoryValueName)\n        .join(\", \");\n\n    return (\n        <li>\n            <Link to={`/graph/${userID}/${category.categoryId}?${subcategoryLinkString}`}>\n                {category.categoryName} {category.subcategories.length > 0 ? `- ${subcategoryTextString}` : \"\"}\n            </Link>\n        </li>\n    );\n};\n\n\nconst LevelCategoryLink: FC<LevelCategoryLinkProps> = ({category, userID}: LevelCategoryLinkProps) => {\n    const subcategoryLinkString = category.subcategories.map((subcategory) => \n        `${subcategory.subcategoryKeyId}=${subcategory.subcategoryValueId}`\n    ).join(\"&\");\n\n    const subcategoryTextString = category.subcategories\n        .map(subcategory => subcategory.subcategoryValueName)\n        .join(\", \");\n\n    return (\n        <li>\n            <Link to={`/graph/il/${userID}/${category.levelId}/${category.categoryId}?${subcategoryLinkString}`}>\n                {category.levelName} {category.categoryName} {category.subcategories.length > 0 ? `- ${subcategoryTextString}` : \"\"}\n            </Link>\n        </li>\n    );\n};\n\n\ninterface GameLinkSetProps {\n    game: Game;\n    userData: UserData;\n}\nconst GameLinkSet: FC<GameLinkSetProps> = ({game, userData}: GameLinkSetProps) => {\n    return (\n        <>\n            <h1> {game.name} </h1>\n            {game.fullGameCategories.length > 0 ? <h2>Full game runs:</h2> : <></>}\n            <ul>\n                {game.fullGameCategories.map((category) => (\n                    <FullGameCategoryLink key={JSON.stringify(category)} category={category} userID={userData.id}/>\n                ))}\n            </ul>\n            {game.levelCategories.length > 0 ? <h2>IL runs:</h2> : <></>}\n            <ul>\n                {game.levelCategories.map((category) => (\n                    <LevelCategoryLink key={JSON.stringify(category)} category={category} userID={userData.id}/>\n                ))}\n            </ul>\n        </>\n    );\n};\n\nconst loadVariables = async (variables: SRCVariableSet): Promise<Subcategory[]> => {\n    return await Promise.all(Object.entries(variables).map(async ([key, value]: [string, unknown]) => {\n        const variableDataRaw = await fetchp(`${SPEEDRUN_COM_URL}/variables/${key}`);\n        const variableData = await variableDataRaw.json();\n        \n        return {\n            subcategoryKeyId: key,\n            subcategoryValueId: value as string,\n            subcategoryValueName: variableData.data.values.values[value as string].label\n        };\n    }));\n};\n\n\n\nconst getUserData = async (\n    id: string, \n    setIsLoading: Dispatch<SetStateAction<boolean>> , \n    setIsError: Dispatch<SetStateAction<boolean>>, \n    setErrorMessage: Dispatch<SetStateAction<string>>, \n    setUserData: Dispatch<SetStateAction<UserData| null>> \n) => {\n    try {\n\n        const [userApiDataRaw, pbDataRaw] = await Promise.all([\n            fetchp(`${SPEEDRUN_COM_URL}/users/${id}`,{timeout: 30000}),\n            fetchp(`${SPEEDRUN_COM_URL}/users/${id}/personal-bests?embed=game,category,level`,{timeout: 30000})\n        ]);\n\n        const [userApiData, pbData] = await Promise.all([\n            userApiDataRaw.json<SRCResult<SRCUser>>(),\n            pbDataRaw.json<SRCResult<SRCPB_gcl[]>>()\n        ]);\n\n        const pbDataGrouped  = groupBy(pbData.data, pb => pb.category.data.type);\n\n        const pbDataFullGame = pbDataGrouped[\"per-game\"] ?? [];\n        const pbDataIL = pbDataGrouped[\"per-level\"] ?? [];\n        \n        const categoryDataFullGame: Category[] = (await Promise.all(pbDataFullGame.map(async pb => ({\n            gameName: pb.game.data.names.international,\n            gameId:  pb.game.data.id,\n            categoryName: pb.category.data.name,\n            categoryId: pb.category.data.id,\n\n            subcategories: await loadVariables(pb.run.values)\n        })))).sort((a: Category, b: Category) => {\n            if(a.categoryName < b.categoryName) return -1;\n            if(a.categoryName > b.categoryName) return 1;\n            if(a.subcategories.length == 0) return 0;\n            if(a.subcategories[0].subcategoryValueName < b.subcategories[0].subcategoryValueName) return -1;\n            if(a.subcategories[0].subcategoryValueName > b.subcategories[0].subcategoryValueName) return 1;\n            return 0;\n        });\n\n\n        const categoryDataILs: LevelCategory[] = (await Promise.all((pbDataIL.map(async pb => ({\n            gameName: pb.game.data.names.international,\n            gameId:  pb.game.data.id,\n            categoryName: pb.category.data.name,\n            categoryId: pb.category.data.id,\n            levelId: pb.level.data.id,\n            levelName: pb.level.data.name,\n\n            subcategories: await loadVariables(pb.run.values)        \n        }))))).sort((a: LevelCategory, b: LevelCategory) => {\n            if(a.levelName < b.levelName) return -1;\n            if(a.levelName > b.levelName) return 1;\n            if(a.categoryName < b.categoryName) return -1;\n            if(a.categoryName > b.categoryName) return 1;\n            if(a.subcategories.length == 0) return 0;\n            if(a.subcategories[0].subcategoryValueName < b.subcategories[0].subcategoryValueName) return -1;\n            if(a.subcategories[0].subcategoryValueName > b.subcategories[0].subcategoryValueName) return 1;\n\n            return 0;\n        });\n\n\n        const gameIds: string[] = [...new Set<string>(pbData.data.map(pb => pb.game.data.id))];\n\n\n        const games: Game[] = gameIds.map(id => {\n            const fullGameCategories = categoryDataFullGame.filter(category => category.gameId === id);\n            const levelCategories = categoryDataILs.filter(category => category.gameId === id);\n\n            return {\n                id,\n                // this is kinda hacky but it saves a request. as for why we don't just put \n                name: fullGameCategories.length > 0 ? fullGameCategories[0].gameName : levelCategories[0].gameName,\n                fullGameCategories,\n                levelCategories,\n            };\n        });\n\n\n        setUserData({\n            id: userApiData.data.id,\n            name: userApiData.data.names.international,\n            games: games\n        });\n      \n        setIsLoading(false);\n\n    } catch (error) {\n        setIsError(true);\n        setErrorMessage(error.message);\n        console.error(error);\n    }\n};\n\nconst UserPage: FC =  () => {\n    const {id} = useParams<{id: string}>();\n\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const [isError, setIsError] = useState<boolean>(false);\n    const [errorMessage, setErrorMessage] = useState<string>(\"\");\n\n    const [userData, setUserData] = useState<UserData | null>(null);\n\n   \n\n    useEffect(()=>{getUserData(id, setIsLoading, setIsError, setErrorMessage, setUserData);},[]);\n\n    if(isError) return <ErrorAlert error={errorMessage} />;\n    if(isLoading) return <LoadingAlert/>;\n\n\n    \n    return (<>\n        <h2>Categories for {userData?.name}</h2>\n        {userData?.games.map((game: Game) => (\n            <GameLinkSet game={game} userData={userData} key={game.id} />\n        ))}\n    </>);\n\n};\n\nexport default UserPage;","import fetchp from \"fetch-jsonp\";\nimport React, { useEffect, useState, FC } from \"react\";\nimport { useParams } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport { ErrorAlert, LoadingAlert } from \"./Alerts\";\nimport {SPEEDRUN_COM_URL} from \"./App\";\nimport { SRCResult, SRCUser } from \"./SRCQueryResults\";\n\ninterface Result {\n    id: string;\n    name: string;\n}\n\nconst SearchPage: FC = () => {\n    const [results, setResults] = useState<Result[]>([]);\n    const {query} = useParams<{query: string}>();\n\n    const [isError, setIsError] = useState<boolean>(false);\n    const [errorMessage, setErrorMessage] = useState<string>(\"\");\n\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n\n\n    const [exactMatch, setExactMatch] = useState<Result|null>(null);\n\n\n    const getInfo = async () => {\n        try {  \n            const rawLookupData = await fetchp(`${SPEEDRUN_COM_URL}/users?lookup=${query}`, {timeout: 30000});\n            const lookupData = await rawLookupData.json<SRCResult<SRCUser[]>>();\n\n            if(lookupData.data.length > 0) {\n                setExactMatch({\n                    id: lookupData.data[0].id,\n                    name: lookupData.data[0].names.international\n                });\n            }\n\n\n\n            const rawData = await fetchp(`${SPEEDRUN_COM_URL}/users?name=${query}`, {timeout: 30000});\n            const data = await rawData.json<SRCResult<SRCUser[]>>();\n\n            setResults(data.data.map(\n                ({id, names}) => ({\n                    id, \n                    name: names.international\n                }) \n            ));\n\n            setIsLoading(false);\n\n        } catch(error)  {\n            console.error(error);\n            setIsError(true);\n            setErrorMessage(`Error ${errorMessage} occurred`);\n        }\n    };\n\n    useEffect(() => {getInfo();} , [query]);\n\n    if(isError) return <ErrorAlert error={errorMessage} />;\n    if(isLoading) return <LoadingAlert/>;\n\n    return (\n        <>\n            <h3>Results for {query}:</h3>\n            <ul>\n                {exactMatch && <p><b>An exact match was found: <Link to={`/user/${exactMatch.id}`}>{exactMatch.name} </Link></b></p> }\n                {results.length > 0 ? results.map(({id, name}) => (\n                    <li key={id}><Link to={`/user/${id}`}>{name} </Link></li>\n                )) : (<p>No users found. <Link to=\"/\">Search again?</Link></p>)}\n            </ul>\n        </>\n    );\n\n};\n\nexport default SearchPage;","import React, { FC } from \"react\";\n\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport GraphPage from \"./GraphPage\";\n\nimport HomePage from \"./HomePage\";\nimport UserPage from \"./UserPage\";\n\nimport Container from \"react-bootstrap/Container\";\nimport { Nav, Navbar } from \"react-bootstrap\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport SearchPage from \"./SearchPage\";\nimport SearchComponent from \"./SearchComponent\";\nimport { Github } from \"react-bootstrap-icons\";\n\n\nexport const SPEEDRUN_COM_URL = \"https://speedrun.com/api/v1\";\n\n\nconst App : FC = ()  => {\n    return (\n        <Router>\n            <Navbar bg=\"dark\" expand=\"lg\" className=\"mb-4\" style={{justifyContent:\"space-between\"}}>\n                <Nav>\n                    <Navbar.Brand href=\"#/\" style={{color: \"white\"}}>Speedrun PB Grapher</Navbar.Brand>\n                    <Nav.Link href=\"#/\" style={{color: \"white\"}}>Home</Nav.Link>\n                </Nav>\n                <Nav className=\"float-right\">\n                    <SearchComponent/>\n                    <Nav.Link href=\"https://github.com/Hurricane996/speedrun-pb-graph\"><Github style={{color: \"white\"}} className=\"ml-auto\"/></Nav.Link>\n                </Nav>\n            </Navbar>\n            <Container>\n                <Switch>\n                    <Route path=\"/user/:id\" exact>\n                        <UserPage />\n                    </Route>\n                    <Route path=\"/graph/il/:userId/:levelId/:categoryId\" exact>\n                        <GraphPage isIL={true}/>\n                    </Route>\n                    <Route path=\"/graph/:userId/:categoryId\" exact>\n                        <GraphPage isIL={false}/>\n                    </Route>\n                    <Route path=\"/search/:query\" exact>\n                        <SearchPage />\n                    </Route>\n                    <Route path=\"/\" exact>\n                        <HomePage/>\n                    </Route>\n                    <Route>404</Route>\n                </Switch>\n            </Container>\n        </Router>\n    );\n};\n\n\nexport default App;\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}