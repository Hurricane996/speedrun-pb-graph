{"version":3,"sources":["GraphPage.tsx","HomePage.tsx","UserPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["makeHumanReadable","input","ms","s","Math","floor","m","h","msString","toFixed","slice","sString","mString","hString","ret","console","log","chartOptions","scales","x","type","time","tooltipFormat","y","ticks","callback","value","index","values","plugins","tooltip","callbacks","label","context","parsed","GraphPage","useParams","userId","categoryId","useState","isLoading","setIsLoading","isError","setIsError","errorMessage","setErrorMessage","gameName","setGameName","categoryName","setCategoryName","username","setUsername","runs","setRuns","getData","a","Promise","all","axios","get","SPEEDRUN_COM_URL","categoryData","userData","runsData","data","game","names","international","name","filter","run","status","map","date","DateTime","fromFormat","times","primary_t","message","useEffect","chartData","labels","datasets","borderColor","to","Jumbotron","options","width","height","cancelToken","HomePage","searchValue","setSearchValue","searchValueIsLoading","setSearchValueIsLoading","results","setResults","getInfo","query","cancel","CancelToken","source","token","id","Form","Group","Label","Control","onChange","event","target","length","UserPage","setUserData","getUserData","userApiData","pbData","categories","category","gameId","error","App","Navbar","bg","Brand","style","textDecoration","color","Nav","Item","Container","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60a3efe5.chunk.js","sourcesContent":["import axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { SPEEDRUN_COM_URL } from './App';\n\nimport {Chart, Line} from 'react-chartjs-2'\n\nimport 'chartjs-adapter-luxon';\nimport { DateTime } from 'luxon';\nimport { Link } from 'react-router-dom';\nimport { Jumbotron } from 'react-bootstrap';\n\n\n\ninterface Run {\n    date: Date;\n    time: number;\n};\n\nconst makeHumanReadable = (input: number): string => {\n    const ms = input % 1;\n    const s = Math.floor(input) % 60;\n    const m = Math.floor(input/60) % 60;\n    const h = Math.floor(input/3600);\n\n    const msString = ms === 0 ? \"\" : ms.toFixed(3).slice(1);\n\n    const sString = s < 10 ? `0${s}` : `${s}`;\n\n    const mString = m < 10 ? `0${m}` : `${m}`;\n    const hString = h === 0 ? \"\" : `${h}:`\n\n    const ret = `${hString}${mString}:${sString}${msString}`\n    console.log(ret);\n    return ret;\n}\n\nconst chartOptions = {\n    scales: {\n        x: {\n            type: 'time',\n            time: {\n                tooltipFormat: 'DD'\n            }\n        },\n        y: {\n            ticks: {\n                callback: (value: number, index: number, values: number[]) => makeHumanReadable(value)\n            }\n        }\n    },\n    plugins: {\n        tooltip: {\n            callbacks: {\n                label: (context: any) => makeHumanReadable(context.parsed.y)\n            }\n        }\n    }\n}\n\nconst GraphPage = () => \n{\n    const {userId, categoryId} = useParams<{userId?: string, categoryId?: string}>()\n\n\n    let [isLoading, setIsLoading] = useState<boolean>(true);\n    let [isError, setIsError] = useState<boolean>(false);\n    let [errorMessage, setErrorMessage] = useState<string>(\"\");\n\n    const [gameName, setGameName] = useState<string>(\"\");\n    const [categoryName, setCategoryName] = useState<string>(\"\");\n    const [username, setUsername] = useState<string>(\"\");\n\n    const [runs, setRuns] = useState<Run[]>([]);\n\n    const getData = async () => {\n        try {\n            let [categoryData, userData, runsData] = await Promise.all([\n                axios.get(`${SPEEDRUN_COM_URL}/categories/${categoryId}?embed=game`),\n                axios.get(`${SPEEDRUN_COM_URL}/users/${userId}`),\n                axios.get(`${SPEEDRUN_COM_URL}/runs?user=${userId}&category=${categoryId}`)\n            ])\n\n            console.log(runsData)\n            setGameName(categoryData.data.data.game.data.names.international);\n            setCategoryName(categoryData.data.data.name);\n\n            setUsername(userData.data.data.names.international)\n\n            setIsLoading(false);\n\n            setRuns(runsData.data.data\n                .filter((run: any) => run.status.status !== \"rejected\")\n                .map((run: any) => ({date: DateTime.fromFormat(run.date, \"yyyy-MM-dd\"), time: run.times.primary_t}))\n            )\n\n\n        } catch (e) {\n            setIsError(true);\n            setErrorMessage(e.message);\n            console.log(e);\n        }\n    }\n\n    useEffect(() => {getData()}, [])\n    \n    if(isError) return(<p>Encountered error '{errorMessage}'</p>)\n    if(isLoading) return (<p>Loading...</p>)\n\n    const chartData = {\n        labels: runs.map(run=>run.date),\n        datasets: [{\n            label: \"Time\",\n            data: runs.map(run=>run.time),\n            borderColor: 'rgb(255,0,0)',\n        }]\n    }\n\n\n    return (\n        <>\n        <h1>{gameName} : {categoryName} - {username}</h1>\n        <Link to={`/user/${userId}`} >Back to user</Link>\n        <Jumbotron>\n            <Line type='line' data={chartData} options={chartOptions} width={600} height={250} />\n        </Jumbotron>\n        </>\n    )\n}\nexport default GraphPage;","import axios, { CancelTokenSource } from \"axios\";\nimport React, { ChangeEvent, useState } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { SPEEDRUN_COM_URL } from \"./App\";\n\nlet cancelToken: CancelTokenSource | null  = null;\n\ninterface User {\n    name: string,\n    id: string\n}\n\n\n\n\nconst HomePage = () => {\n    let [searchValue, setSearchValue] = useState<string>('');\n    let [searchValueIsLoading, setSearchValueIsLoading] = useState<boolean>(false);\n    let [results, setResults] = useState<User[]>([]);\n  \n    const getInfo = async (query: string) => {\n      if(cancelToken) {\n        cancelToken.cancel();\n      }\n      try {\n          cancelToken = axios.CancelToken.source();\n\n          let {data} = await axios.get(`${SPEEDRUN_COM_URL}/users?name=${query}`,{cancelToken: cancelToken.token})\n\n          console.log(data.data)\n\n          setResults(data.data.slice(0,5).map(\n              ({id, names}: any) => ({\n                  id, \n                  name: names.international\n              })\n          ))\n\n          setSearchValueIsLoading(false);\n\n      } catch(error)  {\n          console.log(error);\n      };\n  }\n\n  \n    const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n        setSearchValue(event.target.value);\n        setSearchValueIsLoading(true);\n        if(event.target.value.length >= 1) {\n            getInfo(event.target.value);\n        }\n        else {\n            setResults([])\n        }\n    }\n    return (\n      <>\n        <Form>\n          <Form.Group>\n            <Form.Label>\n              Enter your speedrun.com username\n            </Form.Label>\n            <Form.Control type=\"search\" name=\"username\" onChange={handleInputChange} value={searchValue}/>\n          </Form.Group>\n          { !searchValueIsLoading && searchValue.length != 0 ? (\n            <>\n            <h3>Users:</h3>\n            <ul>\n              {results.length > 0 ? results.map(({id, name}) => (\n                <li><Link to={`/user/${id}`}>{name} </Link></li>\n              )) : (<p>No users found</p>)}\n            </ul>\n            </>\n            ) : searchValue.length != 0 ? (<p>Loading...</p>) : <></> }\n        </Form>\n      </>\n    )\n  }\n\n  export default HomePage;","import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport {Link, useParams} from 'react-router-dom';\nimport { SPEEDRUN_COM_URL } from \"./App\";\n\ninterface Category {\n    gameName: string;\n    gameId: string;\n    categoryName: string;\n    categoryId: string;\n}\n\ninterface UserData {\n    id: string;\n    name: string;\n\n    categories: Category[]\n\n}\n\nconst UserPage =  () => {\n    let {id} = useParams<{id?: string}>();\n\n    let [isLoading, setIsLoading] = useState<boolean>(true);\n    let [isError, setIsError] = useState<boolean>(false);\n    let [errorMessage, setErrorMessage] = useState<string>(\"\");\n\n    let [userData, setUserData] = useState<UserData | null>(null);\n\n\n    const getUserData = async () => {\n        try {\n \n\n            let [userApiData, pbData] = await Promise.all([\n                axios.get(`${SPEEDRUN_COM_URL}/users/${id}`),\n                axios.get(`${SPEEDRUN_COM_URL}/users/${id}/personal-bests?embed=game,category`)\n            ])\n\n            setIsLoading(false);\n\n            console.log(pbData.data.data)\n\n            setUserData({\n                id: userApiData.data.data.id,\n                name: userApiData.data.data.names.international,\n                categories: pbData.data.data.map(({game, category}: any) => ({\n                    gameName: game.data.names.international,\n                    gameId: game.data.id,\n                    categoryName: category.data.name,\n                    categoryId: category.data.id\n                }))\n            })\n\n\n        } catch (error) {\n            setIsError(true);\n            setErrorMessage(error.message);\n            console.error(error);\n        }\n    }\n\n    useEffect(()=>{getUserData();},[]);\n\n    if(isError) return (<p>Error {errorMessage} occured.</p>)\n    if(isLoading) return (<p>Loading...</p>);\n\n    console.log(userData);\n\n    return (<>\n        <h2>{userData?.name}</h2>\n        <ul>\n            {userData?.categories.map((category: Category) => (\n                <li><Link to={`/graph/${userData?.id}/${category.categoryId}`}>{category.gameName}: {category.categoryName}</Link></li>\n            ))}\n        </ul>\n    </>);\n\n  }\n\nexport default UserPage;","import React from 'react';\n\nimport { HashRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport GraphPage from './GraphPage';\n\nimport HomePage from './HomePage';\nimport UserPage from './UserPage'\n\nimport Container from 'react-bootstrap/Container'\nimport { Nav, Navbar } from 'react-bootstrap';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nexport const SPEEDRUN_COM_URL = \"https://speedrun.com/api/v1\";\n\n\nconst App = () => {\n  return (\n    <Router>\n      <Navbar bg=\"dark\">\n          <Navbar.Brand><Link to=\"/\" style={{textDecoration: 'none'}}><h4 style={{color: 'white'}}>Speedrun PB Grapher</h4></Link></Navbar.Brand>\n          <Nav.Item><Link to=\"/\" style={{color:'white', textDecoration:'none'}}>Home</Link></Nav.Item>\n      </Navbar>\n      <Container>\n        <Switch>\n          <Route path=\"/user/:id\" exact>\n            <UserPage />\n          </Route>\n          <Route path=\"/graph/:userId/:categoryId\" exact>\n            <GraphPage />\n          </Route>\n          <Route path=\"/\" exact>\n            <HomePage/>\n          </Route>\n          <Route>404</Route>\n        </Switch>\n      </Container>\n    </Router>\n  );\n}\n\n\nexport default App;\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}